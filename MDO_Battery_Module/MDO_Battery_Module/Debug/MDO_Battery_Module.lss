
MDO_Battery_Module.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000ffb  000010af  2**0
                  ALLOC, LOAD, DATA
  1 .text         0000010c  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000010af  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 00000126  00000000  00000000  000010de  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000290  00000000  00000000  00001208  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000033ae  00000000  00000000  00001498  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000f62  00000000  00000000  00004846  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000012ee  00000000  00000000  000057a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004e8  00000000  00000000  00006a98  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000518  00000000  00000000  00006f80  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000fb6  00000000  00000000  00007498  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001d0  00000000  00000000  0000844e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000fcc  00000fcc  00001080  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00008620  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.i2c_init 00000020  00000e44  00000e44  00000ef8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.i2c_start 00000068  000008f4  000008f4  000009a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.i2c_write 00000028  00000cb0  00000cb0  00000d64  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.i2c_readACK 00000026  00000cd8  00000cd8  00000d8c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.i2c_readNACK 00000026  00000cfe  00000cfe  00000db2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.i2c_stop 00000010  00000f3a  00000f3a  00000fee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.i2c_controller_transmit 0000005e  0000095c  0000095c  00000a10  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.i2c_controller_receive 00000072  00000882  00000882  00000936  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.__vector_12 00000038  00000c18  00000c18  00000ccc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.wdt_on  00000012  00000f28  00000f28  00000fdc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.io_init 0000001e  00000e64  00000e64  00000f18  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.start_sleep 0000001c  00000ebe  00000ebe  00000f72  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.process_battery 00000024  00000d70  00000d70  00000e24  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.main    00000088  00000690  00000690  00000744  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .bss.sleep_count 00000001  00800121  00800121  000010af  2**0
                  ALLOC
 29 .text.max_readRegister 00000050  00000a70  00000a70  00000b24  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.max_writeRegister 00000030  00000c50  00000c50  00000d04  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.max_writeAndVerifyRegister 0000003e  00000bda  00000bda  00000c8e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.max_checkPOR 0000000c  00000f82  00000f82  00001036  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.max_setCellCap 00000078  00000792  00000792  00000846  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.max_setChargeTerm 00000078  0000080a  0000080a  000008be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.max_setSenseResistor 00000006  00000fc0  00000fc0  00001074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.max_setLEDBars 0000001e  00000e82  00000e82  00000f36  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.max_enLEDChargeIndicator 0000001c  00000eda  00000eda  00000f8e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.max_setLEDMode 00000024  00000d94  00000d94  00000e48  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.max_setLEDTimer 00000022  00000e00  00000e00  00000eb4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.max_setLEDBrightness 0000001e  00000ea0  00000ea0  00000f54  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.max_checkCycles 00000026  00000d24  00000d24  00000dd8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.max_debugWrite 00000026  00000d4a  00000d4a  00000dfe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.max_debugDataStruct 000000e8  00000278  00000278  0000032c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.max_debugFuelGauge 000000a0  000005f0  000005f0  000006a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.max_readFuelGauge 00000030  00000c80  00000c80  00000d34  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.max_debugEEPROM 000000de  00000360  00000360  00000414  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text.max_eepromSaveParameters 0000004e  00000ac0  00000ac0  00000b74  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text.max_saveLearnedParameters 00000044  00000b0e  00000b0e  00000bc2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .text.max_eepromLoadParameters 00000058  00000a18  00000a18  00000acc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .text.max_loadConfig 0000016c  0000010c  0000010c  000001c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .data.max17263 00000021  00800100  00000fda  0000108e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 52 .text         00000008  00000fb0  00000fb0  00001064  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .text         000000de  0000043e  0000043e  000004f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text         0000005e  000009ba  000009ba  00000a6e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text         0000007a  00000718  00000718  000007cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text         0000000c  00000f8e  00000f8e  00001042  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text         00000006  00000fc6  00000fc6  0000107a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text         0000000e  00000f4a  00000f4a  00000ffe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text         0000000e  00000f58  00000f58  0000100c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text         00000022  00000e22  00000e22  00000ed6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .text         00000044  00000b52  00000b52  00000c06  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text         0000000e  00000f66  00000f66  0000101a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text         00000008  00000fb8  00000fb8  0000106c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text         000000d4  0000051c  0000051c  000005d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text.libgcc.div 00000044  00000b96  00000b96  00000c4a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text.__dummy_fini 00000002  00000fd4  00000fd4  00001088  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .text.__dummy_funcs_on_exit 00000002  00000fd6  00000fd6  0000108a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .text.__dummy_simulator_exit 00000002  00000fd8  00000fd8  0000108c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .text.exit    00000016  00000f12  00000f12  00000fc6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .text._Exit   00000004  00000fd0  00000fd0  00001084  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 .text.avrlibc 0000000e  00000f74  00000f74  00001028  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 72 .text.avrlibc 0000000c  00000f9a  00000f9a  0000104e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 73 .text.avrlibc 0000000a  00000fa6  00000fa6  0000105a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 74 .text.avrlibc 00000024  00000db8  00000db8  00000e6c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 75 .text.avrlibc 00000024  00000ddc  00000ddc  00000e90  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 76 .text.avrlibc 0000001c  00000ef6  00000ef6  00000faa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__ctors_end>
   4:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__bad_interrupt>
   8:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__bad_interrupt>
   c:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__bad_interrupt>
  10:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__bad_interrupt>
  14:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__bad_interrupt>
  18:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__bad_interrupt>
  1c:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__bad_interrupt>
  20:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__bad_interrupt>
  24:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__bad_interrupt>
  28:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__bad_interrupt>
  2c:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__bad_interrupt>
  30:	0c 94 0c 06 	jmp	0xc18	; 0xc18 <__vector_12>
  34:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__bad_interrupt>
  38:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__bad_interrupt>
  3c:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__bad_interrupt>
  40:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__bad_interrupt>
  44:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__bad_interrupt>
  48:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__bad_interrupt>
  4c:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__bad_interrupt>
  50:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__bad_interrupt>
  54:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__bad_interrupt>
  58:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__bad_interrupt>
  5c:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__bad_interrupt>
  60:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__bad_interrupt>
  64:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__bad_interrupt>
  68:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__bad_interrupt>
  6c:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__bad_interrupt>
  70:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__bad_interrupt>
  74:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__bad_interrupt>
  78:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__bad_interrupt>
  7c:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__bad_interrupt>
  80:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__bad_interrupt>
  84:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__bad_interrupt>
  88:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__bad_interrupt>
  8c:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__bad_interrupt>
  90:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__bad_interrupt>
  94:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__bad_interrupt>
  98:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__bad_interrupt>
  9c:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__bad_interrupt>
  a0:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__bad_interrupt>
  a4:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__bad_interrupt>
  a8:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__bad_interrupt>

000000ac <.dinit>:
  ac:	01 00       	.word	0x0001	; ????
  ae:	01 21       	and	r16, r1
  b0:	00 0f       	add	r16, r16
  b2:	da 01       	movw	r26, r20
  b4:	21 01       	movw	r4, r2
  b6:	22 80       	ldd	r2, Z+2	; 0x02

000000b8 <__ctors_end>:
  b8:	11 24       	eor	r1, r1
  ba:	1f be       	out	0x3f, r1	; 63
  bc:	cf ef       	ldi	r28, 0xFF	; 255
  be:	da e0       	ldi	r29, 0x0A	; 10
  c0:	de bf       	out	0x3e, r29	; 62
  c2:	cd bf       	out	0x3d, r28	; 61

000000c4 <__do_copy_data>:
  c4:	ec ea       	ldi	r30, 0xAC	; 172
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	40 e0       	ldi	r20, 0x00	; 0
  ca:	17 c0       	rjmp	.+46     	; 0xfa <__do_clear_bss+0x8>
  cc:	b5 91       	lpm	r27, Z+
  ce:	a5 91       	lpm	r26, Z+
  d0:	35 91       	lpm	r19, Z+
  d2:	25 91       	lpm	r18, Z+
  d4:	05 91       	lpm	r16, Z+
  d6:	07 fd       	sbrc	r16, 7
  d8:	0c c0       	rjmp	.+24     	; 0xf2 <__do_clear_bss>
  da:	95 91       	lpm	r25, Z+
  dc:	85 91       	lpm	r24, Z+
  de:	ef 01       	movw	r28, r30
  e0:	f9 2f       	mov	r31, r25
  e2:	e8 2f       	mov	r30, r24
  e4:	05 90       	lpm	r0, Z+
  e6:	0d 92       	st	X+, r0
  e8:	a2 17       	cp	r26, r18
  ea:	b3 07       	cpc	r27, r19
  ec:	d9 f7       	brne	.-10     	; 0xe4 <__do_copy_data+0x20>
  ee:	fe 01       	movw	r30, r28
  f0:	04 c0       	rjmp	.+8      	; 0xfa <__do_clear_bss+0x8>

000000f2 <__do_clear_bss>:
  f2:	1d 92       	st	X+, r1
  f4:	a2 17       	cp	r26, r18
  f6:	b3 07       	cpc	r27, r19
  f8:	e1 f7       	brne	.-8      	; 0xf2 <__do_clear_bss>
  fa:	e8 3b       	cpi	r30, 0xB8	; 184
  fc:	f4 07       	cpc	r31, r20
  fe:	31 f7       	brne	.-52     	; 0xcc <__do_copy_data+0x8>
 100:	0e 94 48 03 	call	0x690	; 0x690 <main>
 104:	0c 94 89 07 	jmp	0xf12	; 0xf12 <exit>

00000108 <_exit>:
 108:	f8 94       	cli

0000010a <__stop_program>:
 10a:	ff cf       	rjmp	.-2      	; 0x10a <__stop_program>

Disassembly of section .text:

00000fcc <__bad_interrupt>:
 fcc:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.i2c_init:

00000e44 <i2c_init>:
 * @param fcpu : CPU clock speed
 * @param fscl : Desired I2C clock speed
 *
 ***********************************************************/
void i2c_init(uint32_t fcpu, uint32_t fscl) {
	TWSR = 0x00;
 e44:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	TWBR = (((fcpu/fscl) - 16) / 2);
 e48:	0e 94 cb 05 	call	0xb96	; 0xb96 <__udivmodsi4>
 e4c:	da 01       	movw	r26, r20
 e4e:	c9 01       	movw	r24, r18
 e50:	40 97       	sbiw	r24, 0x10	; 16
 e52:	a1 09       	sbc	r26, r1
 e54:	b1 09       	sbc	r27, r1
 e56:	b6 95       	lsr	r27
 e58:	a7 95       	ror	r26
 e5a:	97 95       	ror	r25
 e5c:	87 95       	ror	r24
 e5e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 e62:	08 95       	ret

Disassembly of section .text.i2c_start:

000008f4 <i2c_start>:
 *
 ***********************************************************/
uint8_t i2c_start(uint8_t addr, uint8_t dir) {
	
	// send START condition, wait for complete
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
 8f4:	94 ea       	ldi	r25, 0xA4	; 164
 8f6:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT)));
 8fa:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 8fe:	99 23       	and	r25, r25
 900:	e4 f7       	brge	.-8      	; 0x8fa <i2c_start+0x6>
  
	// check status reg
	if ((TW_STATUS != TW_START) && (TW_STATUS != TW_REP_START)) {
 902:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 906:	98 7f       	andi	r25, 0xF8	; 248
 908:	98 30       	cpi	r25, 0x08	; 8
 90a:	49 f0       	breq	.+18     	; 0x91e <i2c_start+0x2a>
 90c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 910:	98 7f       	andi	r25, 0xF8	; 248
 912:	90 31       	cpi	r25, 0x10	; 16
 914:	21 f0       	breq	.+8      	; 0x91e <i2c_start+0x2a>
		return TW_STATUS;
 916:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 91a:	88 7f       	andi	r24, 0xF8	; 248
 91c:	08 95       	ret
	}

	// load address + r/w, start transmission
	TWDR = (addr << 1) | dir;
 91e:	90 e0       	ldi	r25, 0x00	; 0
 920:	88 0f       	add	r24, r24
 922:	99 1f       	adc	r25, r25
 924:	86 2b       	or	r24, r22
 926:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1 << TWINT) | (1 << TWEN);
 92a:	84 e8       	ldi	r24, 0x84	; 132
 92c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT)));
 930:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 934:	88 23       	and	r24, r24
 936:	e4 f7       	brge	.-8      	; 0x930 <i2c_start+0x3c>
	
	// check status reg for ACK
	if ((TW_STATUS != TW_MT_SLA_ACK) && (TW_STATUS != TW_MR_SLA_ACK)) {
 938:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 93c:	88 7f       	andi	r24, 0xF8	; 248
 93e:	88 31       	cpi	r24, 0x18	; 24
 940:	49 f0       	breq	.+18     	; 0x954 <i2c_start+0x60>
 942:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 946:	88 7f       	andi	r24, 0xF8	; 248
 948:	80 34       	cpi	r24, 0x40	; 64
 94a:	31 f0       	breq	.+12     	; 0x958 <i2c_start+0x64>
		return TW_STATUS;
 94c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 950:	88 7f       	andi	r24, 0xF8	; 248
 952:	08 95       	ret
	}
	return 0;
 954:	80 e0       	ldi	r24, 0x00	; 0
 956:	08 95       	ret
 958:	80 e0       	ldi	r24, 0x00	; 0
}
 95a:	08 95       	ret

Disassembly of section .text.i2c_write:

00000cb0 <i2c_write>:
 *
 ***********************************************************/
uint8_t i2c_write (uint8_t data) {

	// load data, start transmission
	TWDR = data;
 cb0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1 << TWINT)|(1 << TWEN);
 cb4:	84 e8       	ldi	r24, 0x84	; 132
 cb6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT)));
 cba:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 cbe:	88 23       	and	r24, r24
 cc0:	e4 f7       	brge	.-8      	; 0xcba <i2c_write+0xa>
		
	// check status reg for ACK
	if (TW_STATUS != TW_MT_DATA_ACK) {
 cc2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 cc6:	88 7f       	andi	r24, 0xF8	; 248
 cc8:	88 32       	cpi	r24, 0x28	; 40
 cca:	21 f0       	breq	.+8      	; 0xcd4 <i2c_write+0x24>
		return TW_STATUS;
 ccc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 cd0:	88 7f       	andi	r24, 0xF8	; 248
 cd2:	08 95       	ret
	}
	return 0; 	
 cd4:	80 e0       	ldi	r24, 0x00	; 0
}
 cd6:	08 95       	ret

Disassembly of section .text.i2c_readACK:

00000cd8 <i2c_readACK>:
 *
 ***********************************************************/
uint8_t i2c_readACK(void) {

	// read with ACK
	TWCR = (1 << TWEN) | (1 << TWINT) | (1 << TWEA);
 cd8:	84 ec       	ldi	r24, 0xC4	; 196
 cda:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT)));
 cde:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 ce2:	88 23       	and	r24, r24
 ce4:	e4 f7       	brge	.-8      	; 0xcde <i2c_readACK+0x6>
		
	// check if ACK sent
	if (TW_STATUS!= TW_MR_DATA_ACK) {;
 ce6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 cea:	88 7f       	andi	r24, 0xF8	; 248
 cec:	80 35       	cpi	r24, 0x50	; 80
 cee:	21 f0       	breq	.+8      	; 0xcf8 <i2c_readACK+0x20>
		return TW_STATUS;
 cf0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 cf4:	88 7f       	andi	r24, 0xF8	; 248
 cf6:	08 95       	ret
	}
	// return data on success
	return TWDR;
 cf8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
 cfc:	08 95       	ret

Disassembly of section .text.i2c_readNACK:

00000cfe <i2c_readNACK>:
 *
 ***********************************************************/
uint8_t i2c_readNACK (void) {

	// enable send NACK to slave
	TWCR = (1 << TWEN) | (1 << TWINT);
 cfe:	84 e8       	ldi	r24, 0x84	; 132
 d00:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (! (TWCR & (1 << TWINT)));
 d04:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 d08:	88 23       	and	r24, r24
 d0a:	e4 f7       	brge	.-8      	; 0xd04 <i2c_readNACK+0x6>
		
	// check if NACK sent
	if (TW_STATUS != TW_MR_DATA_NACK) {
 d0c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 d10:	88 7f       	andi	r24, 0xF8	; 248
 d12:	88 35       	cpi	r24, 0x58	; 88
 d14:	21 f0       	breq	.+8      	; 0xd1e <i2c_readNACK+0x20>
		return TW_STATUS;
 d16:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 d1a:	88 7f       	andi	r24, 0xF8	; 248
 d1c:	08 95       	ret
	}
	// return data on success
	return TWDR;
 d1e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
 d22:	08 95       	ret

Disassembly of section .text.i2c_stop:

00000f3a <i2c_stop>:
 *
 * End I2C transaction
 *
 ***********************************************************/
void i2c_stop (void) {
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
 f3a:	84 e9       	ldi	r24, 0x94	; 148
 f3c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(TWCR & (1 << TWSTO));
 f40:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 f44:	84 fd       	sbrc	r24, 4
 f46:	fc cf       	rjmp	.-8      	; 0xf40 <i2c_stop+0x6>
}
 f48:	08 95       	ret

Disassembly of section .text.i2c_controller_transmit:

0000095c <i2c_controller_transmit>:
 * @param data	 : packet byte array 
 * @param len	 : packet length 
 * @param repeat : leave connection open = 1 
 *
 ***********************************************************/
uint8_t i2c_controller_transmit(uint8_t addr, uint8_t* data, uint8_t len, uint8_t repeat) {
 95c:	ff 92       	push	r15
 95e:	0f 93       	push	r16
 960:	1f 93       	push	r17
 962:	cf 93       	push	r28
 964:	df 93       	push	r29
 966:	8b 01       	movw	r16, r22
 968:	d4 2f       	mov	r29, r20
 96a:	f2 2e       	mov	r15, r18
	
	uint8_t err;
	
	err = i2c_start(addr, TW_WRITE);
 96c:	60 e0       	ldi	r22, 0x00	; 0
 96e:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <i2c_start>
	if (err != 0) {
 972:	81 11       	cpse	r24, r1
 974:	1c c0       	rjmp	.+56     	; 0x9ae <i2c_controller_transmit+0x52>
		return err;
	}
	
	if (len > 1) {
 976:	d2 30       	cpi	r29, 0x02	; 2
 978:	48 f4       	brcc	.+18     	; 0x98c <i2c_controller_transmit+0x30>
 97a:	0c c0       	rjmp	.+24     	; 0x994 <i2c_controller_transmit+0x38>
		for (uint8_t i = 0; i < len; i++) {
			err = i2c_write(data[i]);
 97c:	f8 01       	movw	r30, r16
 97e:	ec 0f       	add	r30, r28
 980:	f1 1d       	adc	r31, r1
 982:	80 81       	ld	r24, Z
 984:	0e 94 58 06 	call	0xcb0	; 0xcb0 <i2c_write>
	if (err != 0) {
		return err;
	}
	
	if (len > 1) {
		for (uint8_t i = 0; i < len; i++) {
 988:	cf 5f       	subi	r28, 0xFF	; 255
 98a:	01 c0       	rjmp	.+2      	; 0x98e <i2c_controller_transmit+0x32>
 98c:	c0 e0       	ldi	r28, 0x00	; 0
 98e:	cd 17       	cp	r28, r29
 990:	a8 f3       	brcs	.-22     	; 0x97c <i2c_controller_transmit+0x20>
 992:	04 c0       	rjmp	.+8      	; 0x99c <i2c_controller_transmit+0x40>
			err = i2c_write(data[i]);
		}
	}
	
	else {
		err = i2c_write(data[0]);
 994:	f8 01       	movw	r30, r16
 996:	80 81       	ld	r24, Z
 998:	0e 94 58 06 	call	0xcb0	; 0xcb0 <i2c_write>
	}
	
	if (err != 0) {
 99c:	81 11       	cpse	r24, r1
 99e:	07 c0       	rjmp	.+14     	; 0x9ae <i2c_controller_transmit+0x52>
		return err;
	}
	
	if (!repeat) {
 9a0:	f1 10       	cpse	r15, r1
 9a2:	04 c0       	rjmp	.+8      	; 0x9ac <i2c_controller_transmit+0x50>
		i2c_stop();
 9a4:	0e 94 9d 07 	call	0xf3a	; 0xf3a <i2c_stop>
		return 0;
 9a8:	80 e0       	ldi	r24, 0x00	; 0
 9aa:	01 c0       	rjmp	.+2      	; 0x9ae <i2c_controller_transmit+0x52>
	}
	
	return 0;
 9ac:	80 e0       	ldi	r24, 0x00	; 0
}
 9ae:	df 91       	pop	r29
 9b0:	cf 91       	pop	r28
 9b2:	1f 91       	pop	r17
 9b4:	0f 91       	pop	r16
 9b6:	ff 90       	pop	r15
 9b8:	08 95       	ret

Disassembly of section .text.i2c_controller_receive:

00000882 <i2c_controller_receive>:
 *
 * Disable I2C peripheral
 *
 ***********************************************************/
void i2c_disable(void) {
	TWCR &= ~(1 << TWEN);
 882:	ef 92       	push	r14
 884:	ff 92       	push	r15
 886:	0f 93       	push	r16
 888:	1f 93       	push	r17
 88a:	cf 93       	push	r28
 88c:	df 93       	push	r29
 88e:	8b 01       	movw	r16, r22
 890:	d4 2f       	mov	r29, r20
 892:	61 e0       	ldi	r22, 0x01	; 1
 894:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <i2c_start>
 898:	88 23       	and	r24, r24
 89a:	71 f0       	breq	.+28     	; 0x8b8 <i2c_controller_receive+0x36>
 89c:	68 2f       	mov	r22, r24
 89e:	70 e0       	ldi	r23, 0x00	; 0
 8a0:	80 e0       	ldi	r24, 0x00	; 0
 8a2:	90 e0       	ldi	r25, 0x00	; 0
 8a4:	20 c0       	rjmp	.+64     	; 0x8e6 <i2c_controller_receive+0x64>
 8a6:	78 01       	movw	r14, r16
 8a8:	ec 0e       	add	r14, r28
 8aa:	f1 1c       	adc	r15, r1
 8ac:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <i2c_readACK>
 8b0:	f7 01       	movw	r30, r14
 8b2:	80 83       	st	Z, r24
 8b4:	cf 5f       	subi	r28, 0xFF	; 255
 8b6:	01 c0       	rjmp	.+2      	; 0x8ba <i2c_controller_receive+0x38>
 8b8:	c0 e0       	ldi	r28, 0x00	; 0
 8ba:	2c 2f       	mov	r18, r28
 8bc:	30 e0       	ldi	r19, 0x00	; 0
 8be:	8d 2f       	mov	r24, r29
 8c0:	90 e0       	ldi	r25, 0x00	; 0
 8c2:	01 97       	sbiw	r24, 0x01	; 1
 8c4:	28 17       	cp	r18, r24
 8c6:	39 07       	cpc	r19, r25
 8c8:	74 f3       	brlt	.-36     	; 0x8a6 <i2c_controller_receive+0x24>
 8ca:	8d 2f       	mov	r24, r29
 8cc:	90 e0       	ldi	r25, 0x00	; 0
 8ce:	01 97       	sbiw	r24, 0x01	; 1
 8d0:	e8 01       	movw	r28, r16
 8d2:	c8 0f       	add	r28, r24
 8d4:	d9 1f       	adc	r29, r25
 8d6:	0e 94 7f 06 	call	0xcfe	; 0xcfe <i2c_readNACK>
 8da:	88 83       	st	Y, r24
 8dc:	0e 94 9d 07 	call	0xf3a	; 0xf3a <i2c_stop>
 8e0:	60 e0       	ldi	r22, 0x00	; 0
 8e2:	70 e0       	ldi	r23, 0x00	; 0
 8e4:	cb 01       	movw	r24, r22
 8e6:	df 91       	pop	r29
 8e8:	cf 91       	pop	r28
 8ea:	1f 91       	pop	r17
 8ec:	0f 91       	pop	r16
 8ee:	ff 90       	pop	r15
 8f0:	ef 90       	pop	r14
 8f2:	08 95       	ret

Disassembly of section .text.__vector_12:

00000c18 <__vector_12>:
#define SDA_PIN   PORTD1
#define SDA_READ  PIND


volatile uint8_t sleep_count = 0;
ISR(WDT_vect) {
 c18:	1f 92       	push	r1
 c1a:	0f 92       	push	r0
 c1c:	0f b6       	in	r0, 0x3f	; 63
 c1e:	0f 92       	push	r0
 c20:	11 24       	eor	r1, r1
 c22:	8f 93       	push	r24
	sleep_count++;
 c24:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <sleep_count>
 c28:	8f 5f       	subi	r24, 0xFF	; 255
 c2a:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <sleep_count>
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
 c2e:	0f b6       	in	r0, 0x3f	; 63
 c30:	f8 94       	cli
 c32:	a8 95       	wdr
 c34:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
 c38:	88 61       	ori	r24, 0x18	; 24
 c3a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
 c3e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
 c42:	0f be       	out	0x3f, r0	; 63
	wdt_disable();
}
 c44:	8f 91       	pop	r24
 c46:	0f 90       	pop	r0
 c48:	0f be       	out	0x3f, r0	; 63
 c4a:	0f 90       	pop	r0
 c4c:	1f 90       	pop	r1
 c4e:	18 95       	reti

Disassembly of section .text.wdt_on:

00000f28 <wdt_on>:


void wdt_on(void) {
	MCUSR  = 0;                                   // Clear reset flags
 f28:	14 be       	out	0x34, r1	; 52
	WDTCSR = (_BV(WDCE) | _BV(WDE));              // Enable Change bit
 f2a:	e0 e6       	ldi	r30, 0x60	; 96
 f2c:	f0 e0       	ldi	r31, 0x00	; 0
 f2e:	88 e1       	ldi	r24, 0x18	; 24
 f30:	80 83       	st	Z, r24
	WDTCSR = (_BV(WDP3) | _BV(WDP0) | _BV(WDIE)); // Set timeout to 8s, Enable WDT interrupts
 f32:	81 e6       	ldi	r24, 0x61	; 97
 f34:	80 83       	st	Z, r24
	wdt_reset();
 f36:	a8 95       	wdr
 f38:	08 95       	ret

Disassembly of section .text.io_init:

00000e64 <io_init>:
}


void io_init(void) {
	cli();
 e64:	f8 94       	cli
	
	// Disable pullups SDA, SCL
	I2C_DIR  |= (_BV(SDA_PIN)  | _BV(SCL_PIN));
 e66:	8a b1       	in	r24, 0x0a	; 10
 e68:	83 60       	ori	r24, 0x03	; 3
 e6a:	8a b9       	out	0x0a, r24	; 10
	I2C_PORT |= (_BV(SDA_PIN) | _BV(SCL_PIN));
 e6c:	8b b1       	in	r24, 0x0b	; 11
 e6e:	83 60       	ori	r24, 0x03	; 3
 e70:	8b b9       	out	0x0b, r24	; 11

	// Enable LED monitor, output low
	LED_DIR  |= _BV(LED_PIN);
 e72:	87 b1       	in	r24, 0x07	; 7
 e74:	80 68       	ori	r24, 0x80	; 128
 e76:	87 b9       	out	0x07, r24	; 7
	LED_PORT &= _BV(LED_PIN);
 e78:	88 b1       	in	r24, 0x08	; 8
 e7a:	80 78       	andi	r24, 0x80	; 128
 e7c:	88 b9       	out	0x08, r24	; 8
	
	sei();
 e7e:	78 94       	sei
 e80:	08 95       	ret

Disassembly of section .text.start_sleep:

00000ebe <start_sleep>:
}


void start_sleep(void) {
	cli();
 ebe:	f8 94       	cli
	ADCSRA = 0;
 ec0:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	wdt_on();
 ec4:	0e 94 94 07 	call	0xf28	; 0xf28 <wdt_on>
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 ec8:	83 b7       	in	r24, 0x33	; 51
 eca:	81 7f       	andi	r24, 0xF1	; 241
 ecc:	84 60       	ori	r24, 0x04	; 4
 ece:	83 bf       	out	0x33, r24	; 51
	sleep_enable();
 ed0:	83 b7       	in	r24, 0x33	; 51
 ed2:	81 60       	ori	r24, 0x01	; 1
 ed4:	83 bf       	out	0x33, r24	; 51
	sei();
 ed6:	78 94       	sei
 ed8:	08 95       	ret

Disassembly of section .text.process_battery:

00000d70 <process_battery>:

void process_battery(void) {
	
	// Power on reset has occured
	// We need to reload configuration
	if (max_checkPOR())
 d70:	0e 94 c1 07 	call	0xf82	; 0xf82 <max_checkPOR>
 d74:	89 2b       	or	r24, r25
 d76:	11 f0       	breq	.+4      	; 0xd7c <process_battery+0xc>
		max_loadConfig();
 d78:	0e 94 86 00 	call	0x10c	; 0x10c <__data_load_end>

	// Save learned parameters
	// When bit 6 of Cycles Reg has toggled
	if (max_checkCycles())
 d7c:	0e 94 92 06 	call	0xd24	; 0xd24 <max_checkCycles>
 d80:	81 11       	cpse	r24, r1
		max_saveLearnedParameters();
 d82:	0e 94 87 05 	call	0xb0e	; 0xb0e <max_saveLearnedParameters>

	#ifdef I2C_DEBUG
	max_readFuelGauge();
 d86:	0e 94 40 06 	call	0xc80	; 0xc80 <max_readFuelGauge>
	#endif
	
	#ifdef I2C_DEBUG
		max_debugDataStruct();
 d8a:	0e 94 3c 01 	call	0x278	; 0x278 <max_debugDataStruct>
		max_debugEEPROM();
 d8e:	0e 94 b0 01 	call	0x360	; 0x360 <max_debugEEPROM>
 d92:	08 95       	ret

Disassembly of section .text.main:

00000690 <main>:


int main(void){
	
	#ifdef I2C_DEBUG
		max_debugWrite(DEBUG_ADDR, DEBUG_STARTUP_CODE);
 690:	6a ea       	ldi	r22, 0xAA	; 170
 692:	7a ea       	ldi	r23, 0xAA	; 170
 694:	89 e6       	ldi	r24, 0x69	; 105
 696:	0e 94 a5 06 	call	0xd4a	; 0xd4a <max_debugWrite>
	#endif
	
	io_init();
 69a:	0e 94 32 07 	call	0xe64	; 0xe64 <io_init>
	i2c_init(F_CPU, I2C_SCL_100KHZ);
 69e:	20 ea       	ldi	r18, 0xA0	; 160
 6a0:	36 e8       	ldi	r19, 0x86	; 134
 6a2:	41 e0       	ldi	r20, 0x01	; 1
 6a4:	50 e0       	ldi	r21, 0x00	; 0
 6a6:	60 e0       	ldi	r22, 0x00	; 0
 6a8:	72 e1       	ldi	r23, 0x12	; 18
 6aa:	8a e7       	ldi	r24, 0x7A	; 122
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	0e 94 22 07 	call	0xe44	; 0xe44 <i2c_init>
	
	// set cell capacity and charge termination
	max_setSenseResistor(10);
 6b2:	8a e0       	ldi	r24, 0x0A	; 10
 6b4:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <max_setSenseResistor>
	max_setCellCap(1200);
 6b8:	80 eb       	ldi	r24, 0xB0	; 176
 6ba:	94 e0       	ldi	r25, 0x04	; 4
 6bc:	0e 94 c9 03 	call	0x792	; 0x792 <max_setCellCap>
	max_setChargeTerm(100);
 6c0:	84 e6       	ldi	r24, 0x64	; 100
 6c2:	90 e0       	ldi	r25, 0x00	; 0
 6c4:	0e 94 05 04 	call	0x80a	; 0x80a <max_setChargeTerm>
	
	// set LED driver operation
	max_setLEDBars(4);
 6c8:	84 e0       	ldi	r24, 0x04	; 4
 6ca:	0e 94 41 07 	call	0xe82	; 0xe82 <max_setLEDBars>
	max_setLEDMode(LED_MODE_PUSH_BUTTON_TIMER);
 6ce:	81 e0       	ldi	r24, 0x01	; 1
 6d0:	0e 94 ca 06 	call	0xd94	; 0xd94 <max_setLEDMode>
	max_setLEDBrightness(LED_MAX_BRIGHTNESS);
 6d4:	8f e1       	ldi	r24, 0x1F	; 31
 6d6:	0e 94 50 07 	call	0xea0	; 0xea0 <max_setLEDBrightness>
	max_setLEDTimer(LED_TIME_1300MS);
 6da:	83 e0       	ldi	r24, 0x03	; 3
 6dc:	0e 94 00 07 	call	0xe00	; 0xe00 <max_setLEDTimer>
	max_enLEDChargeIndicator(true);
 6e0:	81 e0       	ldi	r24, 0x01	; 1
 6e2:	0e 94 6d 07 	call	0xeda	; 0xeda <max_enLEDChargeIndicator>
	//max_enLEDEmptyBlink(true);

	// load configuration settings
	max_loadConfig();
 6e6:	0e 94 86 00 	call	0x10c	; 0x10c <__data_load_end>
	
	#ifdef DEBUG
		max_debugWrite(DEBUG_ADDR, DEBUG_DONE_STARTUP_CODE);
 6ea:	6b eb       	ldi	r22, 0xBB	; 187
 6ec:	7b eb       	ldi	r23, 0xBB	; 187
 6ee:	89 e6       	ldi	r24, 0x69	; 105
 6f0:	0e 94 a5 06 	call	0xd4a	; 0xd4a <max_debugWrite>
	#endif
	
	while(1){
		
		// Request battery data every 1 minute
		if (sleep_count == COUNT_1_MIN) {
 6f4:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <sleep_count>
 6f8:	87 30       	cpi	r24, 0x07	; 7
 6fa:	39 f4       	brne	.+14     	; 0x70a <main+0x7a>
			process_battery();
 6fc:	0e 94 b8 06 	call	0xd70	; 0xd70 <process_battery>
			LED_PORT ^= _BV(LED_PIN);
 700:	88 b1       	in	r24, 0x08	; 8
 702:	80 58       	subi	r24, 0x80	; 128
 704:	88 b9       	out	0x08, r24	; 8
			sleep_count = 0;
 706:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <sleep_count>
		}
		// enter sleep
		start_sleep();
 70a:	0e 94 5f 07 	call	0xebe	; 0xebe <start_sleep>
		sleep_cpu();
 70e:	88 95       	sleep
		/**

			sleeping...

		**/
		sleep_disable();	
 710:	83 b7       	in	r24, 0x33	; 51
 712:	8e 7f       	andi	r24, 0xFE	; 254
 714:	83 bf       	out	0x33, r24	; 51
	}
 716:	ee cf       	rjmp	.-36     	; 0x6f4 <main+0x64>

Disassembly of section .text.max_readRegister:

00000a70 <max_readRegister>:
	max_writeRegister(LEDCfg1_REG_ADDR, max17263.LEDCfg1.value);
}

void max_enLEDGrayScale(bool en) {
	max17263.LEDCfg1.bit.Nbars = en;
	max_writeRegister(LEDCfg1_REG_ADDR, max17263.LEDCfg1.value);
 a70:	0f 93       	push	r16
 a72:	1f 93       	push	r17
 a74:	cf 93       	push	r28
 a76:	df 93       	push	r29
 a78:	00 d0       	rcall	.+0      	; 0xa7a <max_readRegister+0xa>
 a7a:	cd b7       	in	r28, 0x3d	; 61
 a7c:	de b7       	in	r29, 0x3e	; 62
 a7e:	89 83       	std	Y+1, r24	; 0x01
 a80:	00 e0       	ldi	r16, 0x00	; 0
 a82:	11 e0       	ldi	r17, 0x01	; 1
 a84:	f8 01       	movw	r30, r16
 a86:	80 81       	ld	r24, Z
 a88:	21 e0       	ldi	r18, 0x01	; 1
 a8a:	41 e0       	ldi	r20, 0x01	; 1
 a8c:	be 01       	movw	r22, r28
 a8e:	6f 5f       	subi	r22, 0xFF	; 255
 a90:	7f 4f       	sbci	r23, 0xFF	; 255
 a92:	0e 94 ae 04 	call	0x95c	; 0x95c <i2c_controller_transmit>
 a96:	f8 01       	movw	r30, r16
 a98:	80 81       	ld	r24, Z
 a9a:	42 e0       	ldi	r20, 0x02	; 2
 a9c:	be 01       	movw	r22, r28
 a9e:	6f 5f       	subi	r22, 0xFF	; 255
 aa0:	7f 4f       	sbci	r23, 0xFF	; 255
 aa2:	0e 94 41 04 	call	0x882	; 0x882 <i2c_controller_receive>
 aa6:	8a 81       	ldd	r24, Y+2	; 0x02
 aa8:	90 e0       	ldi	r25, 0x00	; 0
 aaa:	98 2f       	mov	r25, r24
 aac:	88 27       	eor	r24, r24
 aae:	29 81       	ldd	r18, Y+1	; 0x01
 ab0:	82 2b       	or	r24, r18
 ab2:	0f 90       	pop	r0
 ab4:	0f 90       	pop	r0
 ab6:	df 91       	pop	r29
 ab8:	cf 91       	pop	r28
 aba:	1f 91       	pop	r17
 abc:	0f 91       	pop	r16
 abe:	08 95       	ret

Disassembly of section .text.max_writeRegister:

00000c50 <max_writeRegister>:
 c50:	cf 93       	push	r28
 c52:	df 93       	push	r29
 c54:	00 d0       	rcall	.+0      	; 0xc56 <max_writeRegister+0x6>
 c56:	0f 92       	push	r0
 c58:	cd b7       	in	r28, 0x3d	; 61
 c5a:	de b7       	in	r29, 0x3e	; 62
 c5c:	89 83       	std	Y+1, r24	; 0x01
 c5e:	6a 83       	std	Y+2, r22	; 0x02
 c60:	7b 83       	std	Y+3, r23	; 0x03
 c62:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 c66:	20 e0       	ldi	r18, 0x00	; 0
 c68:	43 e0       	ldi	r20, 0x03	; 3
 c6a:	be 01       	movw	r22, r28
 c6c:	6f 5f       	subi	r22, 0xFF	; 255
 c6e:	7f 4f       	sbci	r23, 0xFF	; 255
 c70:	0e 94 ae 04 	call	0x95c	; 0x95c <i2c_controller_transmit>
 c74:	0f 90       	pop	r0
 c76:	0f 90       	pop	r0
 c78:	0f 90       	pop	r0
 c7a:	df 91       	pop	r29
 c7c:	cf 91       	pop	r28
 c7e:	08 95       	ret

Disassembly of section .text.max_writeAndVerifyRegister:

00000bda <max_writeAndVerifyRegister>:
 bda:	0f 93       	push	r16
 bdc:	1f 93       	push	r17
 bde:	cf 93       	push	r28
 be0:	df 93       	push	r29
 be2:	d8 2f       	mov	r29, r24
 be4:	8b 01       	movw	r16, r22
 be6:	c0 e0       	ldi	r28, 0x00	; 0
 be8:	b8 01       	movw	r22, r16
 bea:	8d 2f       	mov	r24, r29
 bec:	0e 94 28 06 	call	0xc50	; 0xc50 <max_writeRegister>
 bf0:	8f ec       	ldi	r24, 0xCF	; 207
 bf2:	97 e0       	ldi	r25, 0x07	; 7
 bf4:	01 97       	sbiw	r24, 0x01	; 1
 bf6:	f1 f7       	brne	.-4      	; 0xbf4 <max_writeAndVerifyRegister+0x1a>
 bf8:	00 c0       	rjmp	.+0      	; 0xbfa <max_writeAndVerifyRegister+0x20>
 bfa:	00 00       	nop
 bfc:	8d 2f       	mov	r24, r29
 bfe:	0e 94 38 05 	call	0xa70	; 0xa70 <max_readRegister>
 c02:	cf 5f       	subi	r28, 0xFF	; 255
 c04:	08 17       	cp	r16, r24
 c06:	19 07       	cpc	r17, r25
 c08:	11 f0       	breq	.+4      	; 0xc0e <max_writeAndVerifyRegister+0x34>
 c0a:	c3 30       	cpi	r28, 0x03	; 3
 c0c:	68 f3       	brcs	.-38     	; 0xbe8 <max_writeAndVerifyRegister+0xe>
 c0e:	df 91       	pop	r29
 c10:	cf 91       	pop	r28
 c12:	1f 91       	pop	r17
 c14:	0f 91       	pop	r16
 c16:	08 95       	ret

Disassembly of section .text.max_checkPOR:

00000f82 <max_checkPOR>:
 *
 * @returns : POR bit state
 *
 ***********************************************************/
uint16_t max_checkPOR(void) {
	return (max_readRegister(Status_REG_ADDR) & POR);	// return state of por bit in status reg
 f82:	80 e0       	ldi	r24, 0x00	; 0
 f84:	0e 94 38 05 	call	0xa70	; 0xa70 <max_readRegister>
}
 f88:	82 70       	andi	r24, 0x02	; 2
 f8a:	99 27       	eor	r25, r25
 f8c:	08 95       	ret

Disassembly of section .text.max_setCellCap:

00000792 <max_setCellCap>:
	max_writeRegister(LEDCfg1_REG_ADDR, max17263.LEDCfg1.value);
}

void max_enLEDGrayScale(bool en) {
	max17263.LEDCfg1.bit.Nbars = en;
	max_writeRegister(LEDCfg1_REG_ADDR, max17263.LEDCfg1.value);
 792:	cf 92       	push	r12
 794:	df 92       	push	r13
 796:	ef 92       	push	r14
 798:	ff 92       	push	r15
 79a:	0f 93       	push	r16
 79c:	1f 93       	push	r17
 79e:	cf 93       	push	r28
 7a0:	df 93       	push	r29
 7a2:	8c 01       	movw	r16, r24
 7a4:	c0 e0       	ldi	r28, 0x00	; 0
 7a6:	d1 e0       	ldi	r29, 0x01	; 1
 7a8:	69 81       	ldd	r22, Y+1	; 0x01
 7aa:	70 e0       	ldi	r23, 0x00	; 0
 7ac:	80 e0       	ldi	r24, 0x00	; 0
 7ae:	90 e0       	ldi	r25, 0x00	; 0
 7b0:	0e 94 8e 03 	call	0x71c	; 0x71c <__floatsisf>
 7b4:	9b 01       	movw	r18, r22
 7b6:	ac 01       	movw	r20, r24
 7b8:	6a e0       	ldi	r22, 0x0A	; 10
 7ba:	77 ed       	ldi	r23, 0xD7	; 215
 7bc:	83 ea       	ldi	r24, 0xA3	; 163
 7be:	9b e3       	ldi	r25, 0x3B	; 59
 7c0:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <__divsf3>
 7c4:	20 e0       	ldi	r18, 0x00	; 0
 7c6:	30 e0       	ldi	r19, 0x00	; 0
 7c8:	4a e7       	ldi	r20, 0x7A	; 122
 7ca:	54 e4       	ldi	r21, 0x44	; 68
 7cc:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <__mulsf3>
 7d0:	6b 01       	movw	r12, r22
 7d2:	7c 01       	movw	r14, r24
 7d4:	b8 01       	movw	r22, r16
 7d6:	80 e0       	ldi	r24, 0x00	; 0
 7d8:	90 e0       	ldi	r25, 0x00	; 0
 7da:	0e 94 8c 03 	call	0x718	; 0x718 <__floatunsisf>
 7de:	a7 01       	movw	r20, r14
 7e0:	96 01       	movw	r18, r12
 7e2:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <__divsf3>
 7e6:	0e 94 dd 04 	call	0x9ba	; 0x9ba <__fixunssfsi>
 7ea:	7b 83       	std	Y+3, r23	; 0x03
 7ec:	6a 83       	std	Y+2, r22	; 0x02
 7ee:	6a 81       	ldd	r22, Y+2	; 0x02
 7f0:	7b 81       	ldd	r23, Y+3	; 0x03
 7f2:	88 e1       	ldi	r24, 0x18	; 24
 7f4:	0e 94 28 06 	call	0xc50	; 0xc50 <max_writeRegister>
 7f8:	df 91       	pop	r29
 7fa:	cf 91       	pop	r28
 7fc:	1f 91       	pop	r17
 7fe:	0f 91       	pop	r16
 800:	ff 90       	pop	r15
 802:	ef 90       	pop	r14
 804:	df 90       	pop	r13
 806:	cf 90       	pop	r12
 808:	08 95       	ret

Disassembly of section .text.max_setChargeTerm:

0000080a <max_setChargeTerm>:
 80a:	cf 92       	push	r12
 80c:	df 92       	push	r13
 80e:	ef 92       	push	r14
 810:	ff 92       	push	r15
 812:	0f 93       	push	r16
 814:	1f 93       	push	r17
 816:	cf 93       	push	r28
 818:	df 93       	push	r29
 81a:	8c 01       	movw	r16, r24
 81c:	c0 e0       	ldi	r28, 0x00	; 0
 81e:	d1 e0       	ldi	r29, 0x01	; 1
 820:	69 81       	ldd	r22, Y+1	; 0x01
 822:	70 e0       	ldi	r23, 0x00	; 0
 824:	80 e0       	ldi	r24, 0x00	; 0
 826:	90 e0       	ldi	r25, 0x00	; 0
 828:	0e 94 8e 03 	call	0x71c	; 0x71c <__floatsisf>
 82c:	9b 01       	movw	r18, r22
 82e:	ac 01       	movw	r20, r24
 830:	6d ec       	ldi	r22, 0xCD	; 205
 832:	7c ec       	ldi	r23, 0xCC	; 204
 834:	8c ec       	ldi	r24, 0xCC	; 204
 836:	9a e3       	ldi	r25, 0x3A	; 58
 838:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <__divsf3>
 83c:	20 e0       	ldi	r18, 0x00	; 0
 83e:	30 e0       	ldi	r19, 0x00	; 0
 840:	4a e7       	ldi	r20, 0x7A	; 122
 842:	54 e4       	ldi	r21, 0x44	; 68
 844:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <__mulsf3>
 848:	6b 01       	movw	r12, r22
 84a:	7c 01       	movw	r14, r24
 84c:	b8 01       	movw	r22, r16
 84e:	80 e0       	ldi	r24, 0x00	; 0
 850:	90 e0       	ldi	r25, 0x00	; 0
 852:	0e 94 8c 03 	call	0x718	; 0x718 <__floatunsisf>
 856:	a7 01       	movw	r20, r14
 858:	96 01       	movw	r18, r12
 85a:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <__divsf3>
 85e:	0e 94 dd 04 	call	0x9ba	; 0x9ba <__fixunssfsi>
 862:	79 87       	std	Y+9, r23	; 0x09
 864:	68 87       	std	Y+8, r22	; 0x08
 866:	68 85       	ldd	r22, Y+8	; 0x08
 868:	79 85       	ldd	r23, Y+9	; 0x09
 86a:	8e e1       	ldi	r24, 0x1E	; 30
 86c:	0e 94 28 06 	call	0xc50	; 0xc50 <max_writeRegister>
 870:	df 91       	pop	r29
 872:	cf 91       	pop	r28
 874:	1f 91       	pop	r17
 876:	0f 91       	pop	r16
 878:	ff 90       	pop	r15
 87a:	ef 90       	pop	r14
 87c:	df 90       	pop	r13
 87e:	cf 90       	pop	r12
 880:	08 95       	ret

Disassembly of section .text.max_setSenseResistor:

00000fc0 <max_setSenseResistor>:
 *
 * @param mOhm : resistance in milliohms
 *
 ***********************************************************/
void max_setSenseResistor(uint8_t mOhm) {
  max17263.rsense = mOhm;
 fc0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 fc4:	08 95       	ret

Disassembly of section .text.max_setLEDBars:

00000e82 <max_setLEDBars>:
	max_writeRegister(LEDCfg1_REG_ADDR, max17263.LEDCfg1.value);
}

void max_enLEDGrayScale(bool en) {
	max17263.LEDCfg1.bit.Nbars = en;
	max_writeRegister(LEDCfg1_REG_ADDR, max17263.LEDCfg1.value);
 e82:	8f 70       	andi	r24, 0x0F	; 15
 e84:	ea e0       	ldi	r30, 0x0A	; 10
 e86:	f1 e0       	ldi	r31, 0x01	; 1
 e88:	90 81       	ld	r25, Z
 e8a:	90 7f       	andi	r25, 0xF0	; 240
 e8c:	89 2b       	or	r24, r25
 e8e:	80 83       	st	Z, r24
 e90:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <__DATA_REGION_ORIGIN__+0xa>
 e94:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <__DATA_REGION_ORIGIN__+0xb>
 e98:	80 e4       	ldi	r24, 0x40	; 64
 e9a:	0e 94 28 06 	call	0xc50	; 0xc50 <max_writeRegister>
 e9e:	08 95       	ret

Disassembly of section .text.max_enLEDChargeIndicator:

00000eda <max_enLEDChargeIndicator>:
} 

void max_enLEDChargeIndicator(bool en) {
	max17263.LEDCfg1.bit.LChg = en;
 eda:	ea e0       	ldi	r30, 0x0A	; 10
 edc:	f1 e0       	ldi	r31, 0x01	; 1
 ede:	90 81       	ld	r25, Z
 ee0:	80 fb       	bst	r24, 0
 ee2:	95 f9       	bld	r25, 5
 ee4:	90 83       	st	Z, r25
	max_writeRegister(LEDCfg1_REG_ADDR, max17263.LEDCfg1.value);
 ee6:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <__DATA_REGION_ORIGIN__+0xa>
 eea:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <__DATA_REGION_ORIGIN__+0xb>
 eee:	80 e4       	ldi	r24, 0x40	; 64
 ef0:	0e 94 28 06 	call	0xc50	; 0xc50 <max_writeRegister>
 ef4:	08 95       	ret

Disassembly of section .text.max_setLEDMode:

00000d94 <max_setLEDMode>:
	max_writeRegister(LEDCfg1_REG_ADDR, max17263.LEDCfg1.value);
}

void max_enLEDGrayScale(bool en) {
	max17263.LEDCfg1.bit.Nbars = en;
	max_writeRegister(LEDCfg1_REG_ADDR, max17263.LEDCfg1.value);
 d94:	ea e0       	ldi	r30, 0x0A	; 10
 d96:	f1 e0       	ldi	r31, 0x01	; 1
 d98:	82 95       	swap	r24
 d9a:	88 0f       	add	r24, r24
 d9c:	88 0f       	add	r24, r24
 d9e:	80 7c       	andi	r24, 0xC0	; 192
 da0:	90 81       	ld	r25, Z
 da2:	9f 73       	andi	r25, 0x3F	; 63
 da4:	89 2b       	or	r24, r25
 da6:	80 83       	st	Z, r24
 da8:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <__DATA_REGION_ORIGIN__+0xa>
 dac:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <__DATA_REGION_ORIGIN__+0xb>
 db0:	80 e4       	ldi	r24, 0x40	; 64
 db2:	0e 94 28 06 	call	0xc50	; 0xc50 <max_writeRegister>
 db6:	08 95       	ret

Disassembly of section .text.max_setLEDTimer:

00000e00 <max_setLEDTimer>:
 e00:	ea e0       	ldi	r30, 0x0A	; 10
 e02:	f1 e0       	ldi	r31, 0x01	; 1
 e04:	82 95       	swap	r24
 e06:	88 0f       	add	r24, r24
 e08:	80 7e       	andi	r24, 0xE0	; 224
 e0a:	91 81       	ldd	r25, Z+1	; 0x01
 e0c:	9f 71       	andi	r25, 0x1F	; 31
 e0e:	89 2b       	or	r24, r25
 e10:	81 83       	std	Z+1, r24	; 0x01
 e12:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <__DATA_REGION_ORIGIN__+0xa>
 e16:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <__DATA_REGION_ORIGIN__+0xb>
 e1a:	80 e4       	ldi	r24, 0x40	; 64
 e1c:	0e 94 28 06 	call	0xc50	; 0xc50 <max_writeRegister>
 e20:	08 95       	ret

Disassembly of section .text.max_setLEDBrightness:

00000ea0 <max_setLEDBrightness>:
 ea0:	8f 71       	andi	r24, 0x1F	; 31
 ea2:	ec e0       	ldi	r30, 0x0C	; 12
 ea4:	f1 e0       	ldi	r31, 0x01	; 1
 ea6:	90 81       	ld	r25, Z
 ea8:	90 7e       	andi	r25, 0xE0	; 224
 eaa:	89 2b       	or	r24, r25
 eac:	80 83       	st	Z, r24
 eae:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <__DATA_REGION_ORIGIN__+0xc>
 eb2:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <__DATA_REGION_ORIGIN__+0xd>
 eb6:	8b e4       	ldi	r24, 0x4B	; 75
 eb8:	0e 94 28 06 	call	0xc50	; 0xc50 <max_writeRegister>
 ebc:	08 95       	ret

Disassembly of section .text.max_checkCycles:

00000d24 <max_checkCycles>:
 d24:	87 e1       	ldi	r24, 0x17	; 23
 d26:	0e 94 38 05 	call	0xa70	; 0xa70 <max_readRegister>
 d2a:	20 91 17 01 	lds	r18, 0x0117	; 0x800117 <__DATA_REGION_ORIGIN__+0x17>
 d2e:	30 91 18 01 	lds	r19, 0x0118	; 0x800118 <__DATA_REGION_ORIGIN__+0x18>
 d32:	28 27       	eor	r18, r24
 d34:	39 27       	eor	r19, r25
 d36:	26 ff       	sbrs	r18, 6
 d38:	06 c0       	rjmp	.+12     	; 0xd46 <max_checkCycles+0x22>
 d3a:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <__DATA_REGION_ORIGIN__+0x18>
 d3e:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <__DATA_REGION_ORIGIN__+0x17>
 d42:	81 e0       	ldi	r24, 0x01	; 1
 d44:	08 95       	ret
 d46:	80 e0       	ldi	r24, 0x00	; 0
 d48:	08 95       	ret

Disassembly of section .text.max_debugWrite:

00000d4a <max_debugWrite>:
 d4a:	cf 93       	push	r28
 d4c:	df 93       	push	r29
 d4e:	00 d0       	rcall	.+0      	; 0xd50 <max_debugWrite+0x6>
 d50:	cd b7       	in	r28, 0x3d	; 61
 d52:	de b7       	in	r29, 0x3e	; 62
 d54:	69 83       	std	Y+1, r22	; 0x01
 d56:	7a 83       	std	Y+2, r23	; 0x02
 d58:	20 e0       	ldi	r18, 0x00	; 0
 d5a:	42 e0       	ldi	r20, 0x02	; 2
 d5c:	be 01       	movw	r22, r28
 d5e:	6f 5f       	subi	r22, 0xFF	; 255
 d60:	7f 4f       	sbci	r23, 0xFF	; 255
 d62:	0e 94 ae 04 	call	0x95c	; 0x95c <i2c_controller_transmit>
 d66:	0f 90       	pop	r0
 d68:	0f 90       	pop	r0
 d6a:	df 91       	pop	r29
 d6c:	cf 91       	pop	r28
 d6e:	08 95       	ret

Disassembly of section .text.max_debugDataStruct:

00000278 <max_debugDataStruct>:
 278:	cf 93       	push	r28
 27a:	df 93       	push	r29
 27c:	cd b7       	in	r28, 0x3d	; 61
 27e:	de b7       	in	r29, 0x3e	; 62
 280:	e4 97       	sbiw	r28, 0x34	; 52
 282:	0f b6       	in	r0, 0x3f	; 63
 284:	f8 94       	cli
 286:	de bf       	out	0x3e, r29	; 62
 288:	0f be       	out	0x3f, r0	; 63
 28a:	cd bf       	out	0x3d, r28	; 61
 28c:	8d ed       	ldi	r24, 0xDD	; 221
 28e:	9d ed       	ldi	r25, 0xDD	; 221
 290:	9c 8f       	std	Y+28, r25	; 0x1c
 292:	8b 8f       	std	Y+27, r24	; 0x1b
 294:	e0 e0       	ldi	r30, 0x00	; 0
 296:	f1 e0       	ldi	r31, 0x01	; 1
 298:	82 81       	ldd	r24, Z+2	; 0x02
 29a:	93 81       	ldd	r25, Z+3	; 0x03
 29c:	9e 8f       	std	Y+30, r25	; 0x1e
 29e:	8d 8f       	std	Y+29, r24	; 0x1d
 2a0:	80 85       	ldd	r24, Z+8	; 0x08
 2a2:	91 85       	ldd	r25, Z+9	; 0x09
 2a4:	98 a3       	std	Y+32, r25	; 0x20
 2a6:	8f 8f       	std	Y+31, r24	; 0x1f
 2a8:	84 81       	ldd	r24, Z+4	; 0x04
 2aa:	95 81       	ldd	r25, Z+5	; 0x05
 2ac:	9a a3       	std	Y+34, r25	; 0x22
 2ae:	89 a3       	std	Y+33, r24	; 0x21
 2b0:	86 81       	ldd	r24, Z+6	; 0x06
 2b2:	97 81       	ldd	r25, Z+7	; 0x07
 2b4:	9c a3       	std	Y+36, r25	; 0x24
 2b6:	8b a3       	std	Y+35, r24	; 0x23
 2b8:	83 8d       	ldd	r24, Z+27	; 0x1b
 2ba:	94 8d       	ldd	r25, Z+28	; 0x1c
 2bc:	9e a3       	std	Y+38, r25	; 0x26
 2be:	8d a3       	std	Y+37, r24	; 0x25
 2c0:	85 8d       	ldd	r24, Z+29	; 0x1d
 2c2:	96 8d       	ldd	r25, Z+30	; 0x1e
 2c4:	98 a7       	std	Y+40, r25	; 0x28
 2c6:	8f a3       	std	Y+39, r24	; 0x27
 2c8:	87 8d       	ldd	r24, Z+31	; 0x1f
 2ca:	90 a1       	ldd	r25, Z+32	; 0x20
 2cc:	9a a7       	std	Y+42, r25	; 0x2a
 2ce:	89 a7       	std	Y+41, r24	; 0x29
 2d0:	81 89       	ldd	r24, Z+17	; 0x11
 2d2:	92 89       	ldd	r25, Z+18	; 0x12
 2d4:	9c a7       	std	Y+44, r25	; 0x2c
 2d6:	8b a7       	std	Y+43, r24	; 0x2b
 2d8:	83 89       	ldd	r24, Z+19	; 0x13
 2da:	94 89       	ldd	r25, Z+20	; 0x14
 2dc:	9e a7       	std	Y+46, r25	; 0x2e
 2de:	8d a7       	std	Y+45, r24	; 0x2d
 2e0:	85 89       	ldd	r24, Z+21	; 0x15
 2e2:	96 89       	ldd	r25, Z+22	; 0x16
 2e4:	98 ab       	std	Y+48, r25	; 0x30
 2e6:	8f a7       	std	Y+47, r24	; 0x2f
 2e8:	87 89       	ldd	r24, Z+23	; 0x17
 2ea:	90 8d       	ldd	r25, Z+24	; 0x18
 2ec:	9a ab       	std	Y+50, r25	; 0x32
 2ee:	89 ab       	std	Y+49, r24	; 0x31
 2f0:	81 8d       	ldd	r24, Z+25	; 0x19
 2f2:	92 8d       	ldd	r25, Z+26	; 0x1a
 2f4:	9c ab       	std	Y+52, r25	; 0x34
 2f6:	8b ab       	std	Y+51, r24	; 0x33
 2f8:	20 e0       	ldi	r18, 0x00	; 0
 2fa:	1f c0       	rjmp	.+62     	; 0x33a <max_debugDataStruct+0xc2>
 2fc:	82 2f       	mov	r24, r18
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	e2 2f       	mov	r30, r18
 302:	e6 95       	lsr	r30
 304:	f0 e0       	ldi	r31, 0x00	; 0
 306:	ee 0f       	add	r30, r30
 308:	ff 1f       	adc	r31, r31
 30a:	41 e0       	ldi	r20, 0x01	; 1
 30c:	50 e0       	ldi	r21, 0x00	; 0
 30e:	4c 0f       	add	r20, r28
 310:	5d 1f       	adc	r21, r29
 312:	e4 0f       	add	r30, r20
 314:	f5 1f       	adc	r31, r21
 316:	42 8d       	ldd	r20, Z+26	; 0x1a
 318:	33 8d       	ldd	r19, Z+27	; 0x1b
 31a:	e1 e0       	ldi	r30, 0x01	; 1
 31c:	f0 e0       	ldi	r31, 0x00	; 0
 31e:	ec 0f       	add	r30, r28
 320:	fd 1f       	adc	r31, r29
 322:	e8 0f       	add	r30, r24
 324:	f9 1f       	adc	r31, r25
 326:	40 83       	st	Z, r20
 328:	01 96       	adiw	r24, 0x01	; 1
 32a:	e1 e0       	ldi	r30, 0x01	; 1
 32c:	f0 e0       	ldi	r31, 0x00	; 0
 32e:	ec 0f       	add	r30, r28
 330:	fd 1f       	adc	r31, r29
 332:	e8 0f       	add	r30, r24
 334:	f9 1f       	adc	r31, r25
 336:	30 83       	st	Z, r19
 338:	2e 5f       	subi	r18, 0xFE	; 254
 33a:	26 31       	cpi	r18, 0x16	; 22
 33c:	f8 f2       	brcs	.-66     	; 0x2fc <max_debugDataStruct+0x84>
 33e:	20 e0       	ldi	r18, 0x00	; 0
 340:	4a e1       	ldi	r20, 0x1A	; 26
 342:	be 01       	movw	r22, r28
 344:	6f 5f       	subi	r22, 0xFF	; 255
 346:	7f 4f       	sbci	r23, 0xFF	; 255
 348:	89 e6       	ldi	r24, 0x69	; 105
 34a:	0e 94 ae 04 	call	0x95c	; 0x95c <i2c_controller_transmit>
 34e:	e4 96       	adiw	r28, 0x34	; 52
 350:	0f b6       	in	r0, 0x3f	; 63
 352:	f8 94       	cli
 354:	de bf       	out	0x3e, r29	; 62
 356:	0f be       	out	0x3f, r0	; 63
 358:	cd bf       	out	0x3d, r28	; 61
 35a:	df 91       	pop	r29
 35c:	cf 91       	pop	r28
 35e:	08 95       	ret

Disassembly of section .text.max_debugFuelGauge:

000005f0 <max_debugFuelGauge>:
 5f0:	cf 93       	push	r28
 5f2:	df 93       	push	r29
 5f4:	cd b7       	in	r28, 0x3d	; 61
 5f6:	de b7       	in	r29, 0x3e	; 62
 5f8:	60 97       	sbiw	r28, 0x10	; 16
 5fa:	0f b6       	in	r0, 0x3f	; 63
 5fc:	f8 94       	cli
 5fe:	de bf       	out	0x3e, r29	; 62
 600:	0f be       	out	0x3f, r0	; 63
 602:	cd bf       	out	0x3d, r28	; 61
 604:	8d ed       	ldi	r24, 0xDD	; 221
 606:	9c ec       	ldi	r25, 0xCC	; 204
 608:	9a 87       	std	Y+10, r25	; 0x0a
 60a:	89 87       	std	Y+9, r24	; 0x09
 60c:	e0 e0       	ldi	r30, 0x00	; 0
 60e:	f1 e0       	ldi	r31, 0x01	; 1
 610:	83 8d       	ldd	r24, Z+27	; 0x1b
 612:	94 8d       	ldd	r25, Z+28	; 0x1c
 614:	9c 87       	std	Y+12, r25	; 0x0c
 616:	8b 87       	std	Y+11, r24	; 0x0b
 618:	85 8d       	ldd	r24, Z+29	; 0x1d
 61a:	96 8d       	ldd	r25, Z+30	; 0x1e
 61c:	9e 87       	std	Y+14, r25	; 0x0e
 61e:	8d 87       	std	Y+13, r24	; 0x0d
 620:	87 8d       	ldd	r24, Z+31	; 0x1f
 622:	90 a1       	ldd	r25, Z+32	; 0x20
 624:	98 8b       	std	Y+16, r25	; 0x10
 626:	8f 87       	std	Y+15, r24	; 0x0f
 628:	20 e0       	ldi	r18, 0x00	; 0
 62a:	1f c0       	rjmp	.+62     	; 0x66a <max_debugFuelGauge+0x7a>
 62c:	82 2f       	mov	r24, r18
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	e2 2f       	mov	r30, r18
 632:	e6 95       	lsr	r30
 634:	f0 e0       	ldi	r31, 0x00	; 0
 636:	ee 0f       	add	r30, r30
 638:	ff 1f       	adc	r31, r31
 63a:	41 e0       	ldi	r20, 0x01	; 1
 63c:	50 e0       	ldi	r21, 0x00	; 0
 63e:	4c 0f       	add	r20, r28
 640:	5d 1f       	adc	r21, r29
 642:	e4 0f       	add	r30, r20
 644:	f5 1f       	adc	r31, r21
 646:	40 85       	ldd	r20, Z+8	; 0x08
 648:	31 85       	ldd	r19, Z+9	; 0x09
 64a:	e1 e0       	ldi	r30, 0x01	; 1
 64c:	f0 e0       	ldi	r31, 0x00	; 0
 64e:	ec 0f       	add	r30, r28
 650:	fd 1f       	adc	r31, r29
 652:	e8 0f       	add	r30, r24
 654:	f9 1f       	adc	r31, r25
 656:	40 83       	st	Z, r20
 658:	01 96       	adiw	r24, 0x01	; 1
 65a:	e1 e0       	ldi	r30, 0x01	; 1
 65c:	f0 e0       	ldi	r31, 0x00	; 0
 65e:	ec 0f       	add	r30, r28
 660:	fd 1f       	adc	r31, r29
 662:	e8 0f       	add	r30, r24
 664:	f9 1f       	adc	r31, r25
 666:	30 83       	st	Z, r19
 668:	2e 5f       	subi	r18, 0xFE	; 254
 66a:	28 30       	cpi	r18, 0x08	; 8
 66c:	f8 f2       	brcs	.-66     	; 0x62c <max_debugFuelGauge+0x3c>
 66e:	20 e0       	ldi	r18, 0x00	; 0
 670:	48 e0       	ldi	r20, 0x08	; 8
 672:	be 01       	movw	r22, r28
 674:	6f 5f       	subi	r22, 0xFF	; 255
 676:	7f 4f       	sbci	r23, 0xFF	; 255
 678:	89 e6       	ldi	r24, 0x69	; 105
 67a:	0e 94 ae 04 	call	0x95c	; 0x95c <i2c_controller_transmit>
 67e:	60 96       	adiw	r28, 0x10	; 16
 680:	0f b6       	in	r0, 0x3f	; 63
 682:	f8 94       	cli
 684:	de bf       	out	0x3e, r29	; 62
 686:	0f be       	out	0x3f, r0	; 63
 688:	cd bf       	out	0x3d, r28	; 61
 68a:	df 91       	pop	r29
 68c:	cf 91       	pop	r28
 68e:	08 95       	ret

Disassembly of section .text.max_readFuelGauge:

00000c80 <max_readFuelGauge>:
 c80:	cf 93       	push	r28
 c82:	df 93       	push	r29
 c84:	85 e0       	ldi	r24, 0x05	; 5
 c86:	0e 94 38 05 	call	0xa70	; 0xa70 <max_readRegister>
 c8a:	c0 e0       	ldi	r28, 0x00	; 0
 c8c:	d1 e0       	ldi	r29, 0x01	; 1
 c8e:	9c 8f       	std	Y+28, r25	; 0x1c
 c90:	8b 8f       	std	Y+27, r24	; 0x1b
 c92:	80 e1       	ldi	r24, 0x10	; 16
 c94:	0e 94 38 05 	call	0xa70	; 0xa70 <max_readRegister>
 c98:	9e 8f       	std	Y+30, r25	; 0x1e
 c9a:	8d 8f       	std	Y+29, r24	; 0x1d
 c9c:	81 e1       	ldi	r24, 0x11	; 17
 c9e:	0e 94 38 05 	call	0xa70	; 0xa70 <max_readRegister>
 ca2:	98 a3       	std	Y+32, r25	; 0x20
 ca4:	8f 8f       	std	Y+31, r24	; 0x1f
 ca6:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <max_debugFuelGauge>
 caa:	df 91       	pop	r29
 cac:	cf 91       	pop	r28
 cae:	08 95       	ret

Disassembly of section .text.max_debugEEPROM:

00000360 <max_debugEEPROM>:
 360:	cf 93       	push	r28
 362:	df 93       	push	r29
 364:	cd b7       	in	r28, 0x3d	; 61
 366:	de b7       	in	r29, 0x3e	; 62
 368:	ac 97       	sbiw	r28, 0x2c	; 44
 36a:	0f b6       	in	r0, 0x3f	; 63
 36c:	f8 94       	cli
 36e:	de bf       	out	0x3e, r29	; 62
 370:	0f be       	out	0x3f, r0	; 63
 372:	cd bf       	out	0x3d, r28	; 61
 374:	8e ee       	ldi	r24, 0xEE	; 238
 376:	9e ee       	ldi	r25, 0xEE	; 238
 378:	98 8f       	std	Y+24, r25	; 0x18
 37a:	8f 8b       	std	Y+23, r24	; 0x17
 37c:	62 e0       	ldi	r22, 0x02	; 2
 37e:	70 e0       	ldi	r23, 0x00	; 0
 380:	7a 8f       	std	Y+26, r23	; 0x1a
 382:	69 8f       	std	Y+25, r22	; 0x19
 384:	80 e8       	ldi	r24, 0x80	; 128
 386:	0e 94 ba 07 	call	0xf74	; 0xf74 <eeprom_read_word>
 38a:	9c 8f       	std	Y+28, r25	; 0x1c
 38c:	8b 8f       	std	Y+27, r24	; 0x1b
 38e:	64 e0       	ldi	r22, 0x04	; 4
 390:	70 e0       	ldi	r23, 0x00	; 0
 392:	7e 8f       	std	Y+30, r23	; 0x1e
 394:	6d 8f       	std	Y+29, r22	; 0x1d
 396:	80 e8       	ldi	r24, 0x80	; 128
 398:	0e 94 ba 07 	call	0xf74	; 0xf74 <eeprom_read_word>
 39c:	98 a3       	std	Y+32, r25	; 0x20
 39e:	8f 8f       	std	Y+31, r24	; 0x1f
 3a0:	66 e0       	ldi	r22, 0x06	; 6
 3a2:	70 e0       	ldi	r23, 0x00	; 0
 3a4:	7a a3       	std	Y+34, r23	; 0x22
 3a6:	69 a3       	std	Y+33, r22	; 0x21
 3a8:	80 e8       	ldi	r24, 0x80	; 128
 3aa:	0e 94 ba 07 	call	0xf74	; 0xf74 <eeprom_read_word>
 3ae:	9c a3       	std	Y+36, r25	; 0x24
 3b0:	8b a3       	std	Y+35, r24	; 0x23
 3b2:	68 e0       	ldi	r22, 0x08	; 8
 3b4:	70 e0       	ldi	r23, 0x00	; 0
 3b6:	7e a3       	std	Y+38, r23	; 0x26
 3b8:	6d a3       	std	Y+37, r22	; 0x25
 3ba:	80 e8       	ldi	r24, 0x80	; 128
 3bc:	0e 94 ba 07 	call	0xf74	; 0xf74 <eeprom_read_word>
 3c0:	98 a7       	std	Y+40, r25	; 0x28
 3c2:	8f a3       	std	Y+39, r24	; 0x27
 3c4:	6a e0       	ldi	r22, 0x0A	; 10
 3c6:	70 e0       	ldi	r23, 0x00	; 0
 3c8:	7a a7       	std	Y+42, r23	; 0x2a
 3ca:	69 a7       	std	Y+41, r22	; 0x29
 3cc:	80 e8       	ldi	r24, 0x80	; 128
 3ce:	0e 94 ba 07 	call	0xf74	; 0xf74 <eeprom_read_word>
 3d2:	9c a7       	std	Y+44, r25	; 0x2c
 3d4:	8b a7       	std	Y+43, r24	; 0x2b
 3d6:	20 e0       	ldi	r18, 0x00	; 0
 3d8:	1f c0       	rjmp	.+62     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 3da:	82 2f       	mov	r24, r18
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	e2 2f       	mov	r30, r18
 3e0:	e6 95       	lsr	r30
 3e2:	f0 e0       	ldi	r31, 0x00	; 0
 3e4:	ee 0f       	add	r30, r30
 3e6:	ff 1f       	adc	r31, r31
 3e8:	41 e0       	ldi	r20, 0x01	; 1
 3ea:	50 e0       	ldi	r21, 0x00	; 0
 3ec:	4c 0f       	add	r20, r28
 3ee:	5d 1f       	adc	r21, r29
 3f0:	e4 0f       	add	r30, r20
 3f2:	f5 1f       	adc	r31, r21
 3f4:	46 89       	ldd	r20, Z+22	; 0x16
 3f6:	37 89       	ldd	r19, Z+23	; 0x17
 3f8:	e1 e0       	ldi	r30, 0x01	; 1
 3fa:	f0 e0       	ldi	r31, 0x00	; 0
 3fc:	ec 0f       	add	r30, r28
 3fe:	fd 1f       	adc	r31, r29
 400:	e8 0f       	add	r30, r24
 402:	f9 1f       	adc	r31, r25
 404:	40 83       	st	Z, r20
 406:	01 96       	adiw	r24, 0x01	; 1
 408:	e1 e0       	ldi	r30, 0x01	; 1
 40a:	f0 e0       	ldi	r31, 0x00	; 0
 40c:	ec 0f       	add	r30, r28
 40e:	fd 1f       	adc	r31, r29
 410:	e8 0f       	add	r30, r24
 412:	f9 1f       	adc	r31, r25
 414:	30 83       	st	Z, r19
 416:	2e 5f       	subi	r18, 0xFE	; 254
 418:	26 31       	cpi	r18, 0x16	; 22
 41a:	f8 f2       	brcs	.-66     	; 0x3da <max_debugEEPROM+0x7a>
 41c:	20 e0       	ldi	r18, 0x00	; 0
 41e:	46 e1       	ldi	r20, 0x16	; 22
 420:	be 01       	movw	r22, r28
 422:	6f 5f       	subi	r22, 0xFF	; 255
 424:	7f 4f       	sbci	r23, 0xFF	; 255
 426:	89 e6       	ldi	r24, 0x69	; 105
 428:	0e 94 ae 04 	call	0x95c	; 0x95c <i2c_controller_transmit>
 42c:	ac 96       	adiw	r28, 0x2c	; 44
 42e:	0f b6       	in	r0, 0x3f	; 63
 430:	f8 94       	cli
 432:	de bf       	out	0x3e, r29	; 62
 434:	0f be       	out	0x3f, r0	; 63
 436:	cd bf       	out	0x3d, r28	; 61
 438:	df 91       	pop	r29
 43a:	cf 91       	pop	r28
 43c:	08 95       	ret

Disassembly of section .text.max_eepromSaveParameters:

00000ac0 <max_eepromSaveParameters>:
 ac0:	cf 93       	push	r28
 ac2:	df 93       	push	r29
 ac4:	c0 e0       	ldi	r28, 0x00	; 0
 ac6:	d1 e0       	ldi	r29, 0x01	; 1
 ac8:	69 89       	ldd	r22, Y+17	; 0x11
 aca:	7a 89       	ldd	r23, Y+18	; 0x12
 acc:	82 e0       	ldi	r24, 0x02	; 2
 ace:	90 e0       	ldi	r25, 0x00	; 0
 ad0:	0e 94 cd 07 	call	0xf9a	; 0xf9a <eeprom_update_word>
 ad4:	6b 89       	ldd	r22, Y+19	; 0x13
 ad6:	7c 89       	ldd	r23, Y+20	; 0x14
 ad8:	84 e0       	ldi	r24, 0x04	; 4
 ada:	90 e0       	ldi	r25, 0x00	; 0
 adc:	0e 94 cd 07 	call	0xf9a	; 0xf9a <eeprom_update_word>
 ae0:	6d 89       	ldd	r22, Y+21	; 0x15
 ae2:	7e 89       	ldd	r23, Y+22	; 0x16
 ae4:	86 e0       	ldi	r24, 0x06	; 6
 ae6:	90 e0       	ldi	r25, 0x00	; 0
 ae8:	0e 94 cd 07 	call	0xf9a	; 0xf9a <eeprom_update_word>
 aec:	6f 89       	ldd	r22, Y+23	; 0x17
 aee:	78 8d       	ldd	r23, Y+24	; 0x18
 af0:	88 e0       	ldi	r24, 0x08	; 8
 af2:	90 e0       	ldi	r25, 0x00	; 0
 af4:	0e 94 cd 07 	call	0xf9a	; 0xf9a <eeprom_update_word>
 af8:	69 8d       	ldd	r22, Y+25	; 0x19
 afa:	7a 8d       	ldd	r23, Y+26	; 0x1a
 afc:	8a e0       	ldi	r24, 0x0A	; 10
 afe:	90 e0       	ldi	r25, 0x00	; 0
 b00:	0e 94 cd 07 	call	0xf9a	; 0xf9a <eeprom_update_word>
 b04:	0e 94 b0 01 	call	0x360	; 0x360 <max_debugEEPROM>
 b08:	df 91       	pop	r29
 b0a:	cf 91       	pop	r28
 b0c:	08 95       	ret

Disassembly of section .text.max_saveLearnedParameters:

00000b0e <max_saveLearnedParameters>:
 b0e:	cf 93       	push	r28
 b10:	df 93       	push	r29
 b12:	88 e3       	ldi	r24, 0x38	; 56
 b14:	0e 94 38 05 	call	0xa70	; 0xa70 <max_readRegister>
 b18:	c0 e0       	ldi	r28, 0x00	; 0
 b1a:	d1 e0       	ldi	r29, 0x01	; 1
 b1c:	9a 8b       	std	Y+18, r25	; 0x12
 b1e:	89 8b       	std	Y+17, r24	; 0x11
 b20:	89 e3       	ldi	r24, 0x39	; 57
 b22:	0e 94 38 05 	call	0xa70	; 0xa70 <max_readRegister>
 b26:	9c 8b       	std	Y+20, r25	; 0x14
 b28:	8b 8b       	std	Y+19, r24	; 0x13
 b2a:	80 e1       	ldi	r24, 0x10	; 16
 b2c:	0e 94 38 05 	call	0xa70	; 0xa70 <max_readRegister>
 b30:	9e 8b       	std	Y+22, r25	; 0x16
 b32:	8d 8b       	std	Y+21, r24	; 0x15
 b34:	87 e1       	ldi	r24, 0x17	; 23
 b36:	0e 94 38 05 	call	0xa70	; 0xa70 <max_readRegister>
 b3a:	98 8f       	std	Y+24, r25	; 0x18
 b3c:	8f 8b       	std	Y+23, r24	; 0x17
 b3e:	83 e2       	ldi	r24, 0x23	; 35
 b40:	0e 94 38 05 	call	0xa70	; 0xa70 <max_readRegister>
 b44:	9a 8f       	std	Y+26, r25	; 0x1a
 b46:	89 8f       	std	Y+25, r24	; 0x19
 b48:	0e 94 60 05 	call	0xac0	; 0xac0 <max_eepromSaveParameters>
 b4c:	df 91       	pop	r29
 b4e:	cf 91       	pop	r28
 b50:	08 95       	ret

Disassembly of section .text.max_eepromLoadParameters:

00000a18 <max_eepromLoadParameters>:
 a18:	cf 93       	push	r28
 a1a:	df 93       	push	r29
 a1c:	62 e0       	ldi	r22, 0x02	; 2
 a1e:	70 e0       	ldi	r23, 0x00	; 0
 a20:	80 e8       	ldi	r24, 0x80	; 128
 a22:	0e 94 ba 07 	call	0xf74	; 0xf74 <eeprom_read_word>
 a26:	c0 e0       	ldi	r28, 0x00	; 0
 a28:	d1 e0       	ldi	r29, 0x01	; 1
 a2a:	9a 8b       	std	Y+18, r25	; 0x12
 a2c:	89 8b       	std	Y+17, r24	; 0x11
 a2e:	64 e0       	ldi	r22, 0x04	; 4
 a30:	70 e0       	ldi	r23, 0x00	; 0
 a32:	80 e8       	ldi	r24, 0x80	; 128
 a34:	0e 94 ba 07 	call	0xf74	; 0xf74 <eeprom_read_word>
 a38:	9c 8b       	std	Y+20, r25	; 0x14
 a3a:	8b 8b       	std	Y+19, r24	; 0x13
 a3c:	66 e0       	ldi	r22, 0x06	; 6
 a3e:	70 e0       	ldi	r23, 0x00	; 0
 a40:	80 e8       	ldi	r24, 0x80	; 128
 a42:	0e 94 ba 07 	call	0xf74	; 0xf74 <eeprom_read_word>
 a46:	9e 8b       	std	Y+22, r25	; 0x16
 a48:	8d 8b       	std	Y+21, r24	; 0x15
 a4a:	68 e0       	ldi	r22, 0x08	; 8
 a4c:	70 e0       	ldi	r23, 0x00	; 0
 a4e:	80 e8       	ldi	r24, 0x80	; 128
 a50:	0e 94 ba 07 	call	0xf74	; 0xf74 <eeprom_read_word>
 a54:	98 8f       	std	Y+24, r25	; 0x18
 a56:	8f 8b       	std	Y+23, r24	; 0x17
 a58:	6a e0       	ldi	r22, 0x0A	; 10
 a5a:	70 e0       	ldi	r23, 0x00	; 0
 a5c:	80 e8       	ldi	r24, 0x80	; 128
 a5e:	0e 94 ba 07 	call	0xf74	; 0xf74 <eeprom_read_word>
 a62:	9a 8f       	std	Y+26, r25	; 0x1a
 a64:	89 8f       	std	Y+25, r24	; 0x19
 a66:	0e 94 b0 01 	call	0x360	; 0x360 <max_debugEEPROM>
 a6a:	df 91       	pop	r29
 a6c:	cf 91       	pop	r28
 a6e:	08 95       	ret

Disassembly of section .text.max_loadConfig:

0000010c <max_loadConfig>:
 10c:	ff 92       	push	r15
 10e:	0f 93       	push	r16
 110:	1f 93       	push	r17
 112:	cf 93       	push	r28
 114:	df 93       	push	r29
 116:	6c ec       	ldi	r22, 0xCC	; 204
 118:	7c ec       	ldi	r23, 0xCC	; 204
 11a:	89 e6       	ldi	r24, 0x69	; 105
 11c:	0e 94 a5 06 	call	0xd4a	; 0xd4a <max_debugWrite>
 120:	60 e0       	ldi	r22, 0x00	; 0
 122:	70 e0       	ldi	r23, 0x00	; 0
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	0e 94 ba 07 	call	0xf74	; 0xf74 <eeprom_read_word>
 12a:	8f 3e       	cpi	r24, 0xEF	; 239
 12c:	9e 4b       	sbci	r25, 0xBE	; 190
 12e:	49 f0       	breq	.+18     	; 0x142 <max_loadConfig+0x36>
 130:	6f ee       	ldi	r22, 0xEF	; 239
 132:	7e eb       	ldi	r23, 0xBE	; 190
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <eeprom_write_word>
 13c:	ff 24       	eor	r15, r15
 13e:	f3 94       	inc	r15
 140:	08 c0       	rjmp	.+16     	; 0x152 <max_loadConfig+0x46>
 142:	f1 2c       	mov	r15, r1
 144:	06 c0       	rjmp	.+12     	; 0x152 <max_loadConfig+0x46>
 146:	8f e1       	ldi	r24, 0x1F	; 31
 148:	9e e4       	ldi	r25, 0x4E	; 78
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <max_loadConfig+0x3e>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <max_loadConfig+0x44>
 150:	00 00       	nop
 152:	8d e3       	ldi	r24, 0x3D	; 61
 154:	0e 94 38 05 	call	0xa70	; 0xa70 <max_readRegister>
 158:	80 fd       	sbrc	r24, 0
 15a:	f5 cf       	rjmp	.-22     	; 0x146 <max_loadConfig+0x3a>
 15c:	8a eb       	ldi	r24, 0xBA	; 186
 15e:	0e 94 38 05 	call	0xa70	; 0xa70 <max_readRegister>
 162:	8c 01       	movw	r16, r24
 164:	60 e0       	ldi	r22, 0x00	; 0
 166:	70 e0       	ldi	r23, 0x00	; 0
 168:	80 e6       	ldi	r24, 0x60	; 96
 16a:	0e 94 28 06 	call	0xc50	; 0xc50 <max_writeRegister>
 16e:	60 e0       	ldi	r22, 0x00	; 0
 170:	70 e0       	ldi	r23, 0x00	; 0
 172:	8a eb       	ldi	r24, 0xBA	; 186
 174:	0e 94 28 06 	call	0xc50	; 0xc50 <max_writeRegister>
 178:	60 e9       	ldi	r22, 0x90	; 144
 17a:	70 e0       	ldi	r23, 0x00	; 0
 17c:	80 e6       	ldi	r24, 0x60	; 96
 17e:	0e 94 28 06 	call	0xc50	; 0xc50 <max_writeRegister>
 182:	c0 e0       	ldi	r28, 0x00	; 0
 184:	d1 e0       	ldi	r29, 0x01	; 1
 186:	6a 81       	ldd	r22, Y+2	; 0x02
 188:	7b 81       	ldd	r23, Y+3	; 0x03
 18a:	88 e1       	ldi	r24, 0x18	; 24
 18c:	0e 94 28 06 	call	0xc50	; 0xc50 <max_writeRegister>
 190:	68 85       	ldd	r22, Y+8	; 0x08
 192:	79 85       	ldd	r23, Y+9	; 0x09
 194:	8e e1       	ldi	r24, 0x1E	; 30
 196:	0e 94 28 06 	call	0xc50	; 0xc50 <max_writeRegister>
 19a:	6c 81       	ldd	r22, Y+4	; 0x04
 19c:	7d 81       	ldd	r23, Y+5	; 0x05
 19e:	8a e3       	ldi	r24, 0x3A	; 58
 1a0:	0e 94 28 06 	call	0xc50	; 0xc50 <max_writeRegister>
 1a4:	6e 81       	ldd	r22, Y+6	; 0x06
 1a6:	7f 81       	ldd	r23, Y+7	; 0x07
 1a8:	8b ed       	ldi	r24, 0xDB	; 219
 1aa:	0e 94 28 06 	call	0xc50	; 0xc50 <max_writeRegister>
 1ae:	06 c0       	rjmp	.+12     	; 0x1bc <max_loadConfig+0xb0>
 1b0:	8f e1       	ldi	r24, 0x1F	; 31
 1b2:	9e e4       	ldi	r25, 0x4E	; 78
 1b4:	01 97       	sbiw	r24, 0x01	; 1
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <max_loadConfig+0xa8>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <max_loadConfig+0xae>
 1ba:	00 00       	nop
 1bc:	8b ed       	ldi	r24, 0xDB	; 219
 1be:	0e 94 38 05 	call	0xa70	; 0xa70 <max_readRegister>
 1c2:	99 23       	and	r25, r25
 1c4:	ac f3       	brlt	.-22     	; 0x1b0 <max_loadConfig+0xa4>
 1c6:	ff 20       	and	r15, r15
 1c8:	c9 f0       	breq	.+50     	; 0x1fc <max_loadConfig+0xf0>
 1ca:	88 e3       	ldi	r24, 0x38	; 56
 1cc:	0e 94 38 05 	call	0xa70	; 0xa70 <max_readRegister>
 1d0:	c0 e0       	ldi	r28, 0x00	; 0
 1d2:	d1 e0       	ldi	r29, 0x01	; 1
 1d4:	9a 8b       	std	Y+18, r25	; 0x12
 1d6:	89 8b       	std	Y+17, r24	; 0x11
 1d8:	89 e3       	ldi	r24, 0x39	; 57
 1da:	0e 94 38 05 	call	0xa70	; 0xa70 <max_readRegister>
 1de:	9c 8b       	std	Y+20, r25	; 0x14
 1e0:	8b 8b       	std	Y+19, r24	; 0x13
 1e2:	8a 81       	ldd	r24, Y+2	; 0x02
 1e4:	9b 81       	ldd	r25, Y+3	; 0x03
 1e6:	9e 8b       	std	Y+22, r25	; 0x16
 1e8:	8d 8b       	std	Y+21, r24	; 0x15
 1ea:	18 8e       	std	Y+24, r1	; 0x18
 1ec:	1f 8a       	std	Y+23, r1	; 0x17
 1ee:	8a 81       	ldd	r24, Y+2	; 0x02
 1f0:	9b 81       	ldd	r25, Y+3	; 0x03
 1f2:	9a 8f       	std	Y+26, r25	; 0x1a
 1f4:	89 8f       	std	Y+25, r24	; 0x19
 1f6:	0e 94 60 05 	call	0xac0	; 0xac0 <max_eepromSaveParameters>
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <max_loadConfig+0xf4>
 1fc:	0e 94 0c 05 	call	0xa18	; 0xa18 <max_eepromLoadParameters>
 200:	c0 e0       	ldi	r28, 0x00	; 0
 202:	d1 e0       	ldi	r29, 0x01	; 1
 204:	69 89       	ldd	r22, Y+17	; 0x11
 206:	7a 89       	ldd	r23, Y+18	; 0x12
 208:	88 e3       	ldi	r24, 0x38	; 56
 20a:	0e 94 28 06 	call	0xc50	; 0xc50 <max_writeRegister>
 20e:	6b 89       	ldd	r22, Y+19	; 0x13
 210:	7c 89       	ldd	r23, Y+20	; 0x14
 212:	89 e3       	ldi	r24, 0x39	; 57
 214:	0e 94 28 06 	call	0xc50	; 0xc50 <max_writeRegister>
 218:	6d 89       	ldd	r22, Y+21	; 0x15
 21a:	7e 89       	ldd	r23, Y+22	; 0x16
 21c:	80 e1       	ldi	r24, 0x10	; 16
 21e:	0e 94 28 06 	call	0xc50	; 0xc50 <max_writeRegister>
 222:	6f 89       	ldd	r22, Y+23	; 0x17
 224:	78 8d       	ldd	r23, Y+24	; 0x18
 226:	87 e1       	ldi	r24, 0x17	; 23
 228:	0e 94 28 06 	call	0xc50	; 0xc50 <max_writeRegister>
 22c:	69 8d       	ldd	r22, Y+25	; 0x19
 22e:	7a 8d       	ldd	r23, Y+26	; 0x1a
 230:	83 e2       	ldi	r24, 0x23	; 35
 232:	0e 94 28 06 	call	0xc50	; 0xc50 <max_writeRegister>
 236:	b8 01       	movw	r22, r16
 238:	8a eb       	ldi	r24, 0xBA	; 186
 23a:	0e 94 28 06 	call	0xc50	; 0xc50 <max_writeRegister>
 23e:	6f 85       	ldd	r22, Y+15	; 0x0f
 240:	78 89       	ldd	r23, Y+16	; 0x10
 242:	87 e3       	ldi	r24, 0x37	; 55
 244:	0e 94 28 06 	call	0xc50	; 0xc50 <max_writeRegister>
 248:	6f 85       	ldd	r22, Y+15	; 0x0f
 24a:	78 89       	ldd	r23, Y+16	; 0x10
 24c:	87 e3       	ldi	r24, 0x37	; 55
 24e:	0e 94 28 06 	call	0xc50	; 0xc50 <max_writeRegister>
 252:	6f 85       	ldd	r22, Y+15	; 0x0f
 254:	78 89       	ldd	r23, Y+16	; 0x10
 256:	87 e3       	ldi	r24, 0x37	; 55
 258:	0e 94 28 06 	call	0xc50	; 0xc50 <max_writeRegister>
 25c:	80 e0       	ldi	r24, 0x00	; 0
 25e:	0e 94 38 05 	call	0xa70	; 0xa70 <max_readRegister>
 262:	bc 01       	movw	r22, r24
 264:	6d 7f       	andi	r22, 0xFD	; 253
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	0e 94 ed 05 	call	0xbda	; 0xbda <max_writeAndVerifyRegister>
 26c:	df 91       	pop	r29
 26e:	cf 91       	pop	r28
 270:	1f 91       	pop	r17
 272:	0f 91       	pop	r16
 274:	ff 90       	pop	r15
 276:	08 95       	ret

Disassembly of section .text:

00000fb0 <__divsf3>:
 fb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__divsf3x>
 fb4:	0c 94 11 07 	jmp	0xe22	; 0xe22 <__fp_round>

Disassembly of section .text:

0000043e <__divsf3x>:
 43e:	10 c0       	rjmp	.+32     	; 0x460 <__divsf3x+0x22>
 440:	0e 94 ac 07 	call	0xf58	; 0xf58 <__fp_pscB>
 444:	58 f0       	brcs	.+22     	; 0x45c <__divsf3x+0x1e>
 446:	0e 94 a5 07 	call	0xf4a	; 0xf4a <__fp_pscA>
 44a:	40 f0       	brcs	.+16     	; 0x45c <__divsf3x+0x1e>
 44c:	29 f4       	brne	.+10     	; 0x458 <__divsf3x+0x1a>
 44e:	5f 3f       	cpi	r21, 0xFF	; 255
 450:	29 f0       	breq	.+10     	; 0x45c <__divsf3x+0x1e>
 452:	0c 94 c7 07 	jmp	0xf8e	; 0xf8e <__fp_inf>
 456:	51 11       	cpse	r21, r1
 458:	0c 94 b4 07 	jmp	0xf68	; 0xf68 <__fp_szero>
 45c:	0c 94 e3 07 	jmp	0xfc6	; 0xfc6 <__fp_nan>
 460:	0e 94 a9 05 	call	0xb52	; 0xb52 <__fp_split3>
 464:	68 f3       	brcs	.-38     	; 0x440 <__divsf3x+0x2>

00000466 <__divsf3_pse>:
 466:	99 23       	and	r25, r25
 468:	b1 f3       	breq	.-20     	; 0x456 <__divsf3x+0x18>
 46a:	55 23       	and	r21, r21
 46c:	91 f3       	breq	.-28     	; 0x452 <__divsf3x+0x14>
 46e:	95 1b       	sub	r25, r21
 470:	55 0b       	sbc	r21, r21
 472:	bb 27       	eor	r27, r27
 474:	aa 27       	eor	r26, r26
 476:	62 17       	cp	r22, r18
 478:	73 07       	cpc	r23, r19
 47a:	84 07       	cpc	r24, r20
 47c:	38 f0       	brcs	.+14     	; 0x48c <__divsf3_pse+0x26>
 47e:	9f 5f       	subi	r25, 0xFF	; 255
 480:	5f 4f       	sbci	r21, 0xFF	; 255
 482:	22 0f       	add	r18, r18
 484:	33 1f       	adc	r19, r19
 486:	44 1f       	adc	r20, r20
 488:	aa 1f       	adc	r26, r26
 48a:	a9 f3       	breq	.-22     	; 0x476 <__divsf3_pse+0x10>
 48c:	35 d0       	rcall	.+106    	; 0x4f8 <__divsf3_pse+0x92>
 48e:	0e 2e       	mov	r0, r30
 490:	3a f0       	brmi	.+14     	; 0x4a0 <__divsf3_pse+0x3a>
 492:	e0 e8       	ldi	r30, 0x80	; 128
 494:	32 d0       	rcall	.+100    	; 0x4fa <__divsf3_pse+0x94>
 496:	91 50       	subi	r25, 0x01	; 1
 498:	50 40       	sbci	r21, 0x00	; 0
 49a:	e6 95       	lsr	r30
 49c:	00 1c       	adc	r0, r0
 49e:	ca f7       	brpl	.-14     	; 0x492 <__divsf3_pse+0x2c>
 4a0:	2b d0       	rcall	.+86     	; 0x4f8 <__divsf3_pse+0x92>
 4a2:	fe 2f       	mov	r31, r30
 4a4:	29 d0       	rcall	.+82     	; 0x4f8 <__divsf3_pse+0x92>
 4a6:	66 0f       	add	r22, r22
 4a8:	77 1f       	adc	r23, r23
 4aa:	88 1f       	adc	r24, r24
 4ac:	bb 1f       	adc	r27, r27
 4ae:	26 17       	cp	r18, r22
 4b0:	37 07       	cpc	r19, r23
 4b2:	48 07       	cpc	r20, r24
 4b4:	ab 07       	cpc	r26, r27
 4b6:	b0 e8       	ldi	r27, 0x80	; 128
 4b8:	09 f0       	breq	.+2      	; 0x4bc <__divsf3_pse+0x56>
 4ba:	bb 0b       	sbc	r27, r27
 4bc:	80 2d       	mov	r24, r0
 4be:	bf 01       	movw	r22, r30
 4c0:	ff 27       	eor	r31, r31
 4c2:	93 58       	subi	r25, 0x83	; 131
 4c4:	5f 4f       	sbci	r21, 0xFF	; 255
 4c6:	3a f0       	brmi	.+14     	; 0x4d6 <__divsf3_pse+0x70>
 4c8:	9e 3f       	cpi	r25, 0xFE	; 254
 4ca:	51 05       	cpc	r21, r1
 4cc:	78 f0       	brcs	.+30     	; 0x4ec <__divsf3_pse+0x86>
 4ce:	0c 94 c7 07 	jmp	0xf8e	; 0xf8e <__fp_inf>
 4d2:	0c 94 b4 07 	jmp	0xf68	; 0xf68 <__fp_szero>
 4d6:	5f 3f       	cpi	r21, 0xFF	; 255
 4d8:	e4 f3       	brlt	.-8      	; 0x4d2 <__divsf3_pse+0x6c>
 4da:	98 3e       	cpi	r25, 0xE8	; 232
 4dc:	d4 f3       	brlt	.-12     	; 0x4d2 <__divsf3_pse+0x6c>
 4de:	86 95       	lsr	r24
 4e0:	77 95       	ror	r23
 4e2:	67 95       	ror	r22
 4e4:	b7 95       	ror	r27
 4e6:	f7 95       	ror	r31
 4e8:	9f 5f       	subi	r25, 0xFF	; 255
 4ea:	c9 f7       	brne	.-14     	; 0x4de <__divsf3_pse+0x78>
 4ec:	88 0f       	add	r24, r24
 4ee:	91 1d       	adc	r25, r1
 4f0:	96 95       	lsr	r25
 4f2:	87 95       	ror	r24
 4f4:	97 f9       	bld	r25, 7
 4f6:	08 95       	ret
 4f8:	e1 e0       	ldi	r30, 0x01	; 1
 4fa:	66 0f       	add	r22, r22
 4fc:	77 1f       	adc	r23, r23
 4fe:	88 1f       	adc	r24, r24
 500:	bb 1f       	adc	r27, r27
 502:	62 17       	cp	r22, r18
 504:	73 07       	cpc	r23, r19
 506:	84 07       	cpc	r24, r20
 508:	ba 07       	cpc	r27, r26
 50a:	20 f0       	brcs	.+8      	; 0x514 <__divsf3_pse+0xae>
 50c:	62 1b       	sub	r22, r18
 50e:	73 0b       	sbc	r23, r19
 510:	84 0b       	sbc	r24, r20
 512:	ba 0b       	sbc	r27, r26
 514:	ee 1f       	adc	r30, r30
 516:	88 f7       	brcc	.-30     	; 0x4fa <__divsf3_pse+0x94>
 518:	e0 95       	com	r30
 51a:	08 95       	ret

Disassembly of section .text:

000009ba <__fixunssfsi>:
 9ba:	0e 94 b1 05 	call	0xb62	; 0xb62 <__fp_splitA>
 9be:	88 f0       	brcs	.+34     	; 0x9e2 <__fixunssfsi+0x28>
 9c0:	9f 57       	subi	r25, 0x7F	; 127
 9c2:	98 f0       	brcs	.+38     	; 0x9ea <__fixunssfsi+0x30>
 9c4:	b9 2f       	mov	r27, r25
 9c6:	99 27       	eor	r25, r25
 9c8:	b7 51       	subi	r27, 0x17	; 23
 9ca:	b0 f0       	brcs	.+44     	; 0x9f8 <__fixunssfsi+0x3e>
 9cc:	e1 f0       	breq	.+56     	; 0xa06 <__DATA_REGION_LENGTH__+0x6>
 9ce:	66 0f       	add	r22, r22
 9d0:	77 1f       	adc	r23, r23
 9d2:	88 1f       	adc	r24, r24
 9d4:	99 1f       	adc	r25, r25
 9d6:	1a f0       	brmi	.+6      	; 0x9de <__fixunssfsi+0x24>
 9d8:	ba 95       	dec	r27
 9da:	c9 f7       	brne	.-14     	; 0x9ce <__fixunssfsi+0x14>
 9dc:	14 c0       	rjmp	.+40     	; 0xa06 <__DATA_REGION_LENGTH__+0x6>
 9de:	b1 30       	cpi	r27, 0x01	; 1
 9e0:	91 f0       	breq	.+36     	; 0xa06 <__DATA_REGION_LENGTH__+0x6>
 9e2:	0e 94 b3 07 	call	0xf66	; 0xf66 <__fp_zero>
 9e6:	b1 e0       	ldi	r27, 0x01	; 1
 9e8:	08 95       	ret
 9ea:	0c 94 b3 07 	jmp	0xf66	; 0xf66 <__fp_zero>
 9ee:	67 2f       	mov	r22, r23
 9f0:	78 2f       	mov	r23, r24
 9f2:	88 27       	eor	r24, r24
 9f4:	b8 5f       	subi	r27, 0xF8	; 248
 9f6:	39 f0       	breq	.+14     	; 0xa06 <__DATA_REGION_LENGTH__+0x6>
 9f8:	b9 3f       	cpi	r27, 0xF9	; 249
 9fa:	cc f3       	brlt	.-14     	; 0x9ee <__fixunssfsi+0x34>
 9fc:	86 95       	lsr	r24
 9fe:	77 95       	ror	r23
 a00:	67 95       	ror	r22
 a02:	b3 95       	inc	r27
 a04:	d9 f7       	brne	.-10     	; 0x9fc <__fixunssfsi+0x42>
 a06:	3e f4       	brtc	.+14     	; 0xa16 <__DATA_REGION_LENGTH__+0x16>
 a08:	90 95       	com	r25
 a0a:	80 95       	com	r24
 a0c:	70 95       	com	r23
 a0e:	61 95       	neg	r22
 a10:	7f 4f       	sbci	r23, 0xFF	; 255
 a12:	8f 4f       	sbci	r24, 0xFF	; 255
 a14:	9f 4f       	sbci	r25, 0xFF	; 255
 a16:	08 95       	ret

Disassembly of section .text:

00000718 <__floatunsisf>:
 718:	e8 94       	clt
 71a:	09 c0       	rjmp	.+18     	; 0x72e <__floatsisf+0x12>

0000071c <__floatsisf>:
 71c:	97 fb       	bst	r25, 7
 71e:	3e f4       	brtc	.+14     	; 0x72e <__floatsisf+0x12>
 720:	90 95       	com	r25
 722:	80 95       	com	r24
 724:	70 95       	com	r23
 726:	61 95       	neg	r22
 728:	7f 4f       	sbci	r23, 0xFF	; 255
 72a:	8f 4f       	sbci	r24, 0xFF	; 255
 72c:	9f 4f       	sbci	r25, 0xFF	; 255
 72e:	99 23       	and	r25, r25
 730:	a9 f0       	breq	.+42     	; 0x75c <__floatsisf+0x40>
 732:	f9 2f       	mov	r31, r25
 734:	96 e9       	ldi	r25, 0x96	; 150
 736:	bb 27       	eor	r27, r27
 738:	93 95       	inc	r25
 73a:	f6 95       	lsr	r31
 73c:	87 95       	ror	r24
 73e:	77 95       	ror	r23
 740:	67 95       	ror	r22
 742:	b7 95       	ror	r27
 744:	f1 11       	cpse	r31, r1
 746:	f8 cf       	rjmp	.-16     	; 0x738 <__floatsisf+0x1c>
 748:	fa f4       	brpl	.+62     	; 0x788 <__floatsisf+0x6c>
 74a:	bb 0f       	add	r27, r27
 74c:	11 f4       	brne	.+4      	; 0x752 <__floatsisf+0x36>
 74e:	60 ff       	sbrs	r22, 0
 750:	1b c0       	rjmp	.+54     	; 0x788 <__floatsisf+0x6c>
 752:	6f 5f       	subi	r22, 0xFF	; 255
 754:	7f 4f       	sbci	r23, 0xFF	; 255
 756:	8f 4f       	sbci	r24, 0xFF	; 255
 758:	9f 4f       	sbci	r25, 0xFF	; 255
 75a:	16 c0       	rjmp	.+44     	; 0x788 <__floatsisf+0x6c>
 75c:	88 23       	and	r24, r24
 75e:	11 f0       	breq	.+4      	; 0x764 <__floatsisf+0x48>
 760:	96 e9       	ldi	r25, 0x96	; 150
 762:	11 c0       	rjmp	.+34     	; 0x786 <__floatsisf+0x6a>
 764:	77 23       	and	r23, r23
 766:	21 f0       	breq	.+8      	; 0x770 <__floatsisf+0x54>
 768:	9e e8       	ldi	r25, 0x8E	; 142
 76a:	87 2f       	mov	r24, r23
 76c:	76 2f       	mov	r23, r22
 76e:	05 c0       	rjmp	.+10     	; 0x77a <__floatsisf+0x5e>
 770:	66 23       	and	r22, r22
 772:	71 f0       	breq	.+28     	; 0x790 <__floatsisf+0x74>
 774:	96 e8       	ldi	r25, 0x86	; 134
 776:	86 2f       	mov	r24, r22
 778:	70 e0       	ldi	r23, 0x00	; 0
 77a:	60 e0       	ldi	r22, 0x00	; 0
 77c:	2a f0       	brmi	.+10     	; 0x788 <__floatsisf+0x6c>
 77e:	9a 95       	dec	r25
 780:	66 0f       	add	r22, r22
 782:	77 1f       	adc	r23, r23
 784:	88 1f       	adc	r24, r24
 786:	da f7       	brpl	.-10     	; 0x77e <__floatsisf+0x62>
 788:	88 0f       	add	r24, r24
 78a:	96 95       	lsr	r25
 78c:	87 95       	ror	r24
 78e:	97 f9       	bld	r25, 7
 790:	08 95       	ret

Disassembly of section .text:

00000f8e <__fp_inf>:
 f8e:	97 f9       	bld	r25, 7
 f90:	9f 67       	ori	r25, 0x7F	; 127
 f92:	80 e8       	ldi	r24, 0x80	; 128
 f94:	70 e0       	ldi	r23, 0x00	; 0
 f96:	60 e0       	ldi	r22, 0x00	; 0
 f98:	08 95       	ret

Disassembly of section .text:

00000fc6 <__fp_nan>:
 fc6:	9f ef       	ldi	r25, 0xFF	; 255
 fc8:	80 ec       	ldi	r24, 0xC0	; 192
 fca:	08 95       	ret

Disassembly of section .text:

00000f4a <__fp_pscA>:
 f4a:	00 24       	eor	r0, r0
 f4c:	0a 94       	dec	r0
 f4e:	16 16       	cp	r1, r22
 f50:	17 06       	cpc	r1, r23
 f52:	18 06       	cpc	r1, r24
 f54:	09 06       	cpc	r0, r25
 f56:	08 95       	ret

Disassembly of section .text:

00000f58 <__fp_pscB>:
 f58:	00 24       	eor	r0, r0
 f5a:	0a 94       	dec	r0
 f5c:	12 16       	cp	r1, r18
 f5e:	13 06       	cpc	r1, r19
 f60:	14 06       	cpc	r1, r20
 f62:	05 06       	cpc	r0, r21
 f64:	08 95       	ret

Disassembly of section .text:

00000e22 <__fp_round>:
 e22:	09 2e       	mov	r0, r25
 e24:	03 94       	inc	r0
 e26:	00 0c       	add	r0, r0
 e28:	11 f4       	brne	.+4      	; 0xe2e <__fp_round+0xc>
 e2a:	88 23       	and	r24, r24
 e2c:	52 f0       	brmi	.+20     	; 0xe42 <__fp_round+0x20>
 e2e:	bb 0f       	add	r27, r27
 e30:	40 f4       	brcc	.+16     	; 0xe42 <__fp_round+0x20>
 e32:	bf 2b       	or	r27, r31
 e34:	11 f4       	brne	.+4      	; 0xe3a <__fp_round+0x18>
 e36:	60 ff       	sbrs	r22, 0
 e38:	04 c0       	rjmp	.+8      	; 0xe42 <__fp_round+0x20>
 e3a:	6f 5f       	subi	r22, 0xFF	; 255
 e3c:	7f 4f       	sbci	r23, 0xFF	; 255
 e3e:	8f 4f       	sbci	r24, 0xFF	; 255
 e40:	9f 4f       	sbci	r25, 0xFF	; 255
 e42:	08 95       	ret

Disassembly of section .text:

00000b52 <__fp_split3>:
 b52:	57 fd       	sbrc	r21, 7
 b54:	90 58       	subi	r25, 0x80	; 128
 b56:	44 0f       	add	r20, r20
 b58:	55 1f       	adc	r21, r21
 b5a:	59 f0       	breq	.+22     	; 0xb72 <__fp_splitA+0x10>
 b5c:	5f 3f       	cpi	r21, 0xFF	; 255
 b5e:	71 f0       	breq	.+28     	; 0xb7c <__fp_splitA+0x1a>
 b60:	47 95       	ror	r20

00000b62 <__fp_splitA>:
 b62:	88 0f       	add	r24, r24
 b64:	97 fb       	bst	r25, 7
 b66:	99 1f       	adc	r25, r25
 b68:	61 f0       	breq	.+24     	; 0xb82 <__fp_splitA+0x20>
 b6a:	9f 3f       	cpi	r25, 0xFF	; 255
 b6c:	79 f0       	breq	.+30     	; 0xb8c <__fp_splitA+0x2a>
 b6e:	87 95       	ror	r24
 b70:	08 95       	ret
 b72:	12 16       	cp	r1, r18
 b74:	13 06       	cpc	r1, r19
 b76:	14 06       	cpc	r1, r20
 b78:	55 1f       	adc	r21, r21
 b7a:	f2 cf       	rjmp	.-28     	; 0xb60 <__fp_split3+0xe>
 b7c:	46 95       	lsr	r20
 b7e:	f1 df       	rcall	.-30     	; 0xb62 <__fp_splitA>
 b80:	08 c0       	rjmp	.+16     	; 0xb92 <__fp_splitA+0x30>
 b82:	16 16       	cp	r1, r22
 b84:	17 06       	cpc	r1, r23
 b86:	18 06       	cpc	r1, r24
 b88:	99 1f       	adc	r25, r25
 b8a:	f1 cf       	rjmp	.-30     	; 0xb6e <__fp_splitA+0xc>
 b8c:	86 95       	lsr	r24
 b8e:	71 05       	cpc	r23, r1
 b90:	61 05       	cpc	r22, r1
 b92:	08 94       	sec
 b94:	08 95       	ret

Disassembly of section .text:

00000f66 <__fp_zero>:
 f66:	e8 94       	clt

00000f68 <__fp_szero>:
 f68:	bb 27       	eor	r27, r27
 f6a:	66 27       	eor	r22, r22
 f6c:	77 27       	eor	r23, r23
 f6e:	cb 01       	movw	r24, r22
 f70:	97 f9       	bld	r25, 7
 f72:	08 95       	ret

Disassembly of section .text:

00000fb8 <__mulsf3>:
 fb8:	0e 94 8e 02 	call	0x51c	; 0x51c <__mulsf3x>
 fbc:	0c 94 11 07 	jmp	0xe22	; 0xe22 <__fp_round>

Disassembly of section .text:

0000051c <__mulsf3x>:
 51c:	0f c0       	rjmp	.+30     	; 0x53c <__mulsf3x+0x20>
 51e:	0e 94 a5 07 	call	0xf4a	; 0xf4a <__fp_pscA>
 522:	38 f0       	brcs	.+14     	; 0x532 <__mulsf3x+0x16>
 524:	0e 94 ac 07 	call	0xf58	; 0xf58 <__fp_pscB>
 528:	20 f0       	brcs	.+8      	; 0x532 <__mulsf3x+0x16>
 52a:	95 23       	and	r25, r21
 52c:	11 f0       	breq	.+4      	; 0x532 <__mulsf3x+0x16>
 52e:	0c 94 c7 07 	jmp	0xf8e	; 0xf8e <__fp_inf>
 532:	0c 94 e3 07 	jmp	0xfc6	; 0xfc6 <__fp_nan>
 536:	11 24       	eor	r1, r1
 538:	0c 94 b4 07 	jmp	0xf68	; 0xf68 <__fp_szero>
 53c:	0e 94 a9 05 	call	0xb52	; 0xb52 <__fp_split3>
 540:	70 f3       	brcs	.-36     	; 0x51e <__mulsf3x+0x2>

00000542 <__mulsf3_pse>:
 542:	95 9f       	mul	r25, r21
 544:	c1 f3       	breq	.-16     	; 0x536 <__mulsf3x+0x1a>
 546:	95 0f       	add	r25, r21
 548:	50 e0       	ldi	r21, 0x00	; 0
 54a:	55 1f       	adc	r21, r21
 54c:	62 9f       	mul	r22, r18
 54e:	f0 01       	movw	r30, r0
 550:	72 9f       	mul	r23, r18
 552:	bb 27       	eor	r27, r27
 554:	f0 0d       	add	r31, r0
 556:	b1 1d       	adc	r27, r1
 558:	63 9f       	mul	r22, r19
 55a:	aa 27       	eor	r26, r26
 55c:	f0 0d       	add	r31, r0
 55e:	b1 1d       	adc	r27, r1
 560:	aa 1f       	adc	r26, r26
 562:	64 9f       	mul	r22, r20
 564:	66 27       	eor	r22, r22
 566:	b0 0d       	add	r27, r0
 568:	a1 1d       	adc	r26, r1
 56a:	66 1f       	adc	r22, r22
 56c:	82 9f       	mul	r24, r18
 56e:	22 27       	eor	r18, r18
 570:	b0 0d       	add	r27, r0
 572:	a1 1d       	adc	r26, r1
 574:	62 1f       	adc	r22, r18
 576:	73 9f       	mul	r23, r19
 578:	b0 0d       	add	r27, r0
 57a:	a1 1d       	adc	r26, r1
 57c:	62 1f       	adc	r22, r18
 57e:	83 9f       	mul	r24, r19
 580:	a0 0d       	add	r26, r0
 582:	61 1d       	adc	r22, r1
 584:	22 1f       	adc	r18, r18
 586:	74 9f       	mul	r23, r20
 588:	33 27       	eor	r19, r19
 58a:	a0 0d       	add	r26, r0
 58c:	61 1d       	adc	r22, r1
 58e:	23 1f       	adc	r18, r19
 590:	84 9f       	mul	r24, r20
 592:	60 0d       	add	r22, r0
 594:	21 1d       	adc	r18, r1
 596:	82 2f       	mov	r24, r18
 598:	76 2f       	mov	r23, r22
 59a:	6a 2f       	mov	r22, r26
 59c:	11 24       	eor	r1, r1
 59e:	9f 57       	subi	r25, 0x7F	; 127
 5a0:	50 40       	sbci	r21, 0x00	; 0
 5a2:	9a f0       	brmi	.+38     	; 0x5ca <__mulsf3_pse+0x88>
 5a4:	f1 f0       	breq	.+60     	; 0x5e2 <__mulsf3_pse+0xa0>
 5a6:	88 23       	and	r24, r24
 5a8:	4a f0       	brmi	.+18     	; 0x5bc <__mulsf3_pse+0x7a>
 5aa:	ee 0f       	add	r30, r30
 5ac:	ff 1f       	adc	r31, r31
 5ae:	bb 1f       	adc	r27, r27
 5b0:	66 1f       	adc	r22, r22
 5b2:	77 1f       	adc	r23, r23
 5b4:	88 1f       	adc	r24, r24
 5b6:	91 50       	subi	r25, 0x01	; 1
 5b8:	50 40       	sbci	r21, 0x00	; 0
 5ba:	a9 f7       	brne	.-22     	; 0x5a6 <__mulsf3_pse+0x64>
 5bc:	9e 3f       	cpi	r25, 0xFE	; 254
 5be:	51 05       	cpc	r21, r1
 5c0:	80 f0       	brcs	.+32     	; 0x5e2 <__mulsf3_pse+0xa0>
 5c2:	0c 94 c7 07 	jmp	0xf8e	; 0xf8e <__fp_inf>
 5c6:	0c 94 b4 07 	jmp	0xf68	; 0xf68 <__fp_szero>
 5ca:	5f 3f       	cpi	r21, 0xFF	; 255
 5cc:	e4 f3       	brlt	.-8      	; 0x5c6 <__mulsf3_pse+0x84>
 5ce:	98 3e       	cpi	r25, 0xE8	; 232
 5d0:	d4 f3       	brlt	.-12     	; 0x5c6 <__mulsf3_pse+0x84>
 5d2:	86 95       	lsr	r24
 5d4:	77 95       	ror	r23
 5d6:	67 95       	ror	r22
 5d8:	b7 95       	ror	r27
 5da:	f7 95       	ror	r31
 5dc:	e7 95       	ror	r30
 5de:	9f 5f       	subi	r25, 0xFF	; 255
 5e0:	c1 f7       	brne	.-16     	; 0x5d2 <__mulsf3_pse+0x90>
 5e2:	fe 2b       	or	r31, r30
 5e4:	88 0f       	add	r24, r24
 5e6:	91 1d       	adc	r25, r1
 5e8:	96 95       	lsr	r25
 5ea:	87 95       	ror	r24
 5ec:	97 f9       	bld	r25, 7
 5ee:	08 95       	ret

Disassembly of section .text.libgcc.div:

00000b96 <__udivmodsi4>:
 b96:	a1 e2       	ldi	r26, 0x21	; 33
 b98:	1a 2e       	mov	r1, r26
 b9a:	aa 1b       	sub	r26, r26
 b9c:	bb 1b       	sub	r27, r27
 b9e:	fd 01       	movw	r30, r26
 ba0:	0d c0       	rjmp	.+26     	; 0xbbc <__udivmodsi4_ep>

00000ba2 <__udivmodsi4_loop>:
 ba2:	aa 1f       	adc	r26, r26
 ba4:	bb 1f       	adc	r27, r27
 ba6:	ee 1f       	adc	r30, r30
 ba8:	ff 1f       	adc	r31, r31
 baa:	a2 17       	cp	r26, r18
 bac:	b3 07       	cpc	r27, r19
 bae:	e4 07       	cpc	r30, r20
 bb0:	f5 07       	cpc	r31, r21
 bb2:	20 f0       	brcs	.+8      	; 0xbbc <__udivmodsi4_ep>
 bb4:	a2 1b       	sub	r26, r18
 bb6:	b3 0b       	sbc	r27, r19
 bb8:	e4 0b       	sbc	r30, r20
 bba:	f5 0b       	sbc	r31, r21

00000bbc <__udivmodsi4_ep>:
 bbc:	66 1f       	adc	r22, r22
 bbe:	77 1f       	adc	r23, r23
 bc0:	88 1f       	adc	r24, r24
 bc2:	99 1f       	adc	r25, r25
 bc4:	1a 94       	dec	r1
 bc6:	69 f7       	brne	.-38     	; 0xba2 <__udivmodsi4_loop>
 bc8:	60 95       	com	r22
 bca:	70 95       	com	r23
 bcc:	80 95       	com	r24
 bce:	90 95       	com	r25
 bd0:	9b 01       	movw	r18, r22
 bd2:	ac 01       	movw	r20, r24
 bd4:	bd 01       	movw	r22, r26
 bd6:	cf 01       	movw	r24, r30
 bd8:	08 95       	ret

Disassembly of section .text.__dummy_fini:

00000fd4 <_fini>:
 fd4:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000fd6 <__funcs_on_exit>:
 fd6:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000fd8 <__simulator_exit>:
 fd8:	08 95       	ret

Disassembly of section .text.exit:

00000f12 <exit>:
 f12:	ec 01       	movw	r28, r24
 f14:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__funcs_on_exit>
 f18:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <_fini>
 f1c:	ce 01       	movw	r24, r28
 f1e:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <__simulator_exit>
 f22:	ce 01       	movw	r24, r28
 f24:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <_Exit>

Disassembly of section .text._Exit:

00000fd0 <_Exit>:
 fd0:	0e 94 84 00 	call	0x108	; 0x108 <_exit>

Disassembly of section .text.avrlibc:

00000f74 <eeprom_read_word>:
 f74:	cb 01       	movw	r24, r22
 f76:	a8 e1       	ldi	r26, 0x18	; 24
 f78:	b0 e0       	ldi	r27, 0x00	; 0
 f7a:	42 e0       	ldi	r20, 0x02	; 2
 f7c:	50 e0       	ldi	r21, 0x00	; 0
 f7e:	0c 94 e0 06 	jmp	0xdc0	; 0xdc0 <eeprom_read_blraw>

Disassembly of section .text.avrlibc:

00000f9a <eeprom_update_word>:
 f9a:	01 96       	adiw	r24, 0x01	; 1
 f9c:	27 2f       	mov	r18, r23
 f9e:	0e 94 ef 06 	call	0xdde	; 0xdde <eeprom_update_r18>
 fa2:	0c 94 ee 06 	jmp	0xddc	; 0xddc <eeprom_update_byte>

Disassembly of section .text.avrlibc:

00000fa6 <eeprom_write_word>:
 fa6:	0e 94 7b 07 	call	0xef6	; 0xef6 <eeprom_write_byte>
 faa:	27 2f       	mov	r18, r23
 fac:	0c 94 7c 07 	jmp	0xef8	; 0xef8 <eeprom_write_r18>

Disassembly of section .text.avrlibc:

00000db8 <eeprom_read_block>:
 db8:	ba 01       	movw	r22, r20
 dba:	a9 01       	movw	r20, r18
 dbc:	dc 01       	movw	r26, r24
 dbe:	cb 01       	movw	r24, r22

00000dc0 <eeprom_read_blraw>:
 dc0:	fc 01       	movw	r30, r24
 dc2:	f9 99       	sbic	0x1f, 1	; 31
 dc4:	fe cf       	rjmp	.-4      	; 0xdc2 <eeprom_read_blraw+0x2>
 dc6:	06 c0       	rjmp	.+12     	; 0xdd4 <eeprom_read_blraw+0x14>
 dc8:	f2 bd       	out	0x22, r31	; 34
 dca:	e1 bd       	out	0x21, r30	; 33
 dcc:	f8 9a       	sbi	0x1f, 0	; 31
 dce:	31 96       	adiw	r30, 0x01	; 1
 dd0:	00 b4       	in	r0, 0x20	; 32
 dd2:	0d 92       	st	X+, r0
 dd4:	41 50       	subi	r20, 0x01	; 1
 dd6:	50 40       	sbci	r21, 0x00	; 0
 dd8:	b8 f7       	brcc	.-18     	; 0xdc8 <eeprom_read_blraw+0x8>
 dda:	08 95       	ret

Disassembly of section .text.avrlibc:

00000ddc <eeprom_update_byte>:
 ddc:	26 2f       	mov	r18, r22

00000dde <eeprom_update_r18>:
 dde:	f9 99       	sbic	0x1f, 1	; 31
 de0:	fe cf       	rjmp	.-4      	; 0xdde <eeprom_update_r18>
 de2:	92 bd       	out	0x22, r25	; 34
 de4:	81 bd       	out	0x21, r24	; 33
 de6:	f8 9a       	sbi	0x1f, 0	; 31
 de8:	01 97       	sbiw	r24, 0x01	; 1
 dea:	00 b4       	in	r0, 0x20	; 32
 dec:	02 16       	cp	r0, r18
 dee:	39 f0       	breq	.+14     	; 0xdfe <eeprom_update_r18+0x20>
 df0:	1f ba       	out	0x1f, r1	; 31
 df2:	20 bd       	out	0x20, r18	; 32
 df4:	0f b6       	in	r0, 0x3f	; 63
 df6:	f8 94       	cli
 df8:	fa 9a       	sbi	0x1f, 2	; 31
 dfa:	f9 9a       	sbi	0x1f, 1	; 31
 dfc:	0f be       	out	0x3f, r0	; 63
 dfe:	08 95       	ret

Disassembly of section .text.avrlibc:

00000ef6 <eeprom_write_byte>:
 ef6:	26 2f       	mov	r18, r22

00000ef8 <eeprom_write_r18>:
 ef8:	f9 99       	sbic	0x1f, 1	; 31
 efa:	fe cf       	rjmp	.-4      	; 0xef8 <eeprom_write_r18>
 efc:	1f ba       	out	0x1f, r1	; 31
 efe:	92 bd       	out	0x22, r25	; 34
 f00:	81 bd       	out	0x21, r24	; 33
 f02:	20 bd       	out	0x20, r18	; 32
 f04:	0f b6       	in	r0, 0x3f	; 63
 f06:	f8 94       	cli
 f08:	fa 9a       	sbi	0x1f, 2	; 31
 f0a:	f9 9a       	sbi	0x1f, 1	; 31
 f0c:	0f be       	out	0x3f, r0	; 63
 f0e:	01 96       	adiw	r24, 0x01	; 1
 f10:	08 95       	ret
