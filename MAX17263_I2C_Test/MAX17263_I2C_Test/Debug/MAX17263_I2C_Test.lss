
MAX17263_I2C_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000764  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000764  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 00000054  00000000  00000000  00000793  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001a8  00000000  00000000  000007e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000028d2  00000000  00000000  00000990  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000e86  00000000  00000000  00003262  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ebc  00000000  00000000  000040e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000344  00000000  00000000  00004fa4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000474  00000000  00000000  000052e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000e84  00000000  00000000  0000575c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000128  00000000  00000000  000065e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000006e2  000006e2  00000756  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006708  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.i2c_init 00000020  00000682  00000682  000006f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.i2c_start 00000068  000002e8  000002e8  0000035c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.i2c_write 00000028  000005a0  000005a0  00000614  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.i2c_readACK 00000026  000005c8  000005c8  0000063c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.i2c_readNACK 00000026  000005ee  000005ee  00000662  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.i2c_stop 00000010  000006b8  000006b8  0000072c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.i2c_controller_transmit 0000005e  000003b8  000003b8  0000042c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.i2c_controller_receive 00000072  00000276  00000276  000002ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.main    00000084  000001f2  000001f2  00000266  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.max_readRegister 00000040  000004f4  000004f4  00000568  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.max_writeRegister 0000002e  00000572  00000572  000005e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.max_writeAndVerifyRegister 0000003e  00000534  00000534  000005a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.max_debugWrite 00000026  00000614  00000614  00000688  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.max_debugLED 00000068  00000350  00000350  000003c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.max_eepromSaveParameters 00000048  00000468  00000468  000004dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.max_eepromLoadParameters 00000052  00000416  00000416  0000048a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.max_loadConfig 0000012e  000000c4  000000c4  00000138  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.libgcc.div 00000044  000004b0  000004b0  00000524  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.__dummy_fini 00000002  000006ea  000006ea  0000075e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.__dummy_funcs_on_exit 00000002  000006ec  000006ec  00000760  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.__dummy_simulator_exit 00000002  000006ee  000006ee  00000762  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.exit    00000016  000006a2  000006a2  00000716  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text._Exit   00000004  000006e6  000006e6  0000075a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.avrlibc 0000000e  000006c8  000006c8  0000073c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.avrlibc 0000000c  000006d6  000006d6  0000074a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.avrlibc 00000024  0000063a  0000063a  000006ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.avrlibc 00000024  0000065e  0000065e  000006d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <__bad_interrupt>
   8:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <__bad_interrupt>
   c:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <__bad_interrupt>
  10:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <__bad_interrupt>
  14:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <__bad_interrupt>
  18:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <__bad_interrupt>
  1c:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <__bad_interrupt>
  20:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <__bad_interrupt>
  24:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <__bad_interrupt>
  28:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <__bad_interrupt>
  2c:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <__bad_interrupt>
  30:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <__bad_interrupt>
  34:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <__bad_interrupt>
  38:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <__bad_interrupt>
  3c:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <__bad_interrupt>
  40:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <__bad_interrupt>
  44:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <__bad_interrupt>
  48:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <__bad_interrupt>
  4c:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <__bad_interrupt>
  50:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <__bad_interrupt>
  54:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <__bad_interrupt>
  58:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <__bad_interrupt>
  5c:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <__bad_interrupt>
  60:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <__bad_interrupt>
  64:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <__bad_interrupt>
  68:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <__bad_interrupt>
  6c:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <__bad_interrupt>
  70:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <__bad_interrupt>
  74:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <__bad_interrupt>
  78:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <__bad_interrupt>
  7c:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <__bad_interrupt>
  80:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <__bad_interrupt>
  84:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <__bad_interrupt>
  88:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <__bad_interrupt>
  8c:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <__bad_interrupt>
  90:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <__bad_interrupt>
  94:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <__bad_interrupt>
  98:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <__bad_interrupt>
  9c:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <__bad_interrupt>
  a0:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <__bad_interrupt>
  a4:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <__bad_interrupt>
  a8:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61
  b8:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <main>
  bc:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <exit>

000000c0 <_exit>:
  c0:	f8 94       	cli

000000c2 <__stop_program>:
  c2:	ff cf       	rjmp	.-2      	; 0xc2 <__stop_program>

Disassembly of section .text:

000006e2 <__bad_interrupt>:
 6e2:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.i2c_init:

00000682 <i2c_init>:

/*
	fscl = fcpu / (16 + 2(TWBR) * 4^TWPS)
*/
void i2c_init(uint32_t fcpu, uint32_t fscl) {
	TWSR = 0x00;
 682:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	TWBR = (((fcpu/fscl) - 16) / 2);
 686:	0e 94 58 02 	call	0x4b0	; 0x4b0 <__udivmodsi4>
 68a:	da 01       	movw	r26, r20
 68c:	c9 01       	movw	r24, r18
 68e:	40 97       	sbiw	r24, 0x10	; 16
 690:	a1 09       	sbc	r26, r1
 692:	b1 09       	sbc	r27, r1
 694:	b6 95       	lsr	r27
 696:	a7 95       	ror	r26
 698:	97 95       	ror	r25
 69a:	87 95       	ror	r24
 69c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 6a0:	08 95       	ret

Disassembly of section .text.i2c_start:

000002e8 <i2c_start>:
		return TW_STATUS;
	}
	
	return 0;
	
}
 2e8:	94 ea       	ldi	r25, 0xA4	; 164
 2ea:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2ee:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2f2:	99 23       	and	r25, r25
 2f4:	e4 f7       	brge	.-8      	; 0x2ee <i2c_start+0x6>
 2f6:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 2fa:	98 7f       	andi	r25, 0xF8	; 248
 2fc:	98 30       	cpi	r25, 0x08	; 8
 2fe:	49 f0       	breq	.+18     	; 0x312 <i2c_start+0x2a>
 300:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 304:	98 7f       	andi	r25, 0xF8	; 248
 306:	90 31       	cpi	r25, 0x10	; 16
 308:	21 f0       	breq	.+8      	; 0x312 <i2c_start+0x2a>
 30a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 30e:	88 7f       	andi	r24, 0xF8	; 248
 310:	08 95       	ret
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	88 0f       	add	r24, r24
 316:	99 1f       	adc	r25, r25
 318:	86 2b       	or	r24, r22
 31a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 31e:	84 e8       	ldi	r24, 0x84	; 132
 320:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 324:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 328:	88 23       	and	r24, r24
 32a:	e4 f7       	brge	.-8      	; 0x324 <i2c_start+0x3c>
 32c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 330:	88 7f       	andi	r24, 0xF8	; 248
 332:	88 31       	cpi	r24, 0x18	; 24
 334:	49 f0       	breq	.+18     	; 0x348 <i2c_start+0x60>
 336:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 33a:	88 7f       	andi	r24, 0xF8	; 248
 33c:	80 34       	cpi	r24, 0x40	; 64
 33e:	31 f0       	breq	.+12     	; 0x34c <i2c_start+0x64>
 340:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 344:	88 7f       	andi	r24, 0xF8	; 248
 346:	08 95       	ret
 348:	80 e0       	ldi	r24, 0x00	; 0
 34a:	08 95       	ret
 34c:	80 e0       	ldi	r24, 0x00	; 0
 34e:	08 95       	ret

Disassembly of section .text.i2c_write:

000005a0 <i2c_write>:


uint8_t i2c_write (uint8_t data) {
	
	// load data, start transmission
	TWDR = data;
 5a0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1 << TWINT)|(1 << TWEN);
 5a4:	84 e8       	ldi	r24, 0x84	; 132
 5a6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT)));
 5aa:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 5ae:	88 23       	and	r24, r24
 5b0:	e4 f7       	brge	.-8      	; 0x5aa <i2c_write+0xa>
		
	// check status reg for ACK
	if (TW_STATUS != TW_MT_DATA_ACK) {
 5b2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 5b6:	88 7f       	andi	r24, 0xF8	; 248
 5b8:	88 32       	cpi	r24, 0x28	; 40
 5ba:	21 f0       	breq	.+8      	; 0x5c4 <i2c_write+0x24>
		return TW_STATUS;
 5bc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 5c0:	88 7f       	andi	r24, 0xF8	; 248
 5c2:	08 95       	ret
	}
	
	return 0; 	
 5c4:	80 e0       	ldi	r24, 0x00	; 0
}
 5c6:	08 95       	ret

Disassembly of section .text.i2c_readACK:

000005c8 <i2c_readACK>:


uint8_t i2c_readACK(void) {
		
	// read with ACK
	TWCR = (1 << TWEN) | (1 << TWINT) | (1 << TWEA);
 5c8:	84 ec       	ldi	r24, 0xC4	; 196
 5ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT)));
 5ce:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 5d2:	88 23       	and	r24, r24
 5d4:	e4 f7       	brge	.-8      	; 0x5ce <i2c_readACK+0x6>
		
	// check if ACK sent
	if (TW_STATUS!= TW_MR_DATA_ACK) {
 5d6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 5da:	88 7f       	andi	r24, 0xF8	; 248
 5dc:	80 35       	cpi	r24, 0x50	; 80
 5de:	21 f0       	breq	.+8      	; 0x5e8 <i2c_readACK+0x20>
		return TW_STATUS;
 5e0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 5e4:	88 7f       	andi	r24, 0xF8	; 248
 5e6:	08 95       	ret
	}
		
	// return data on success
	return TWDR;
 5e8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
 5ec:	08 95       	ret

Disassembly of section .text.i2c_readNACK:

000005ee <i2c_readNACK>:


uint8_t i2c_readNACK (void) {
		
	// enable send NACK to slave
	TWCR = (1 << TWEN) | (1 << TWINT);
 5ee:	84 e8       	ldi	r24, 0x84	; 132
 5f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (! (TWCR & (1 << TWINT)));
 5f4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 5f8:	88 23       	and	r24, r24
 5fa:	e4 f7       	brge	.-8      	; 0x5f4 <i2c_readNACK+0x6>
		
	// check if NACK sent
	if (TW_STATUS != TW_MR_DATA_NACK) {
 5fc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 600:	88 7f       	andi	r24, 0xF8	; 248
 602:	88 35       	cpi	r24, 0x58	; 88
 604:	21 f0       	breq	.+8      	; 0x60e <i2c_readNACK+0x20>
		return TW_STATUS;
 606:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 60a:	88 7f       	andi	r24, 0xF8	; 248
 60c:	08 95       	ret
	}
		
	// return data on success
	return TWDR;
 60e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
 612:	08 95       	ret

Disassembly of section .text.i2c_stop:

000006b8 <i2c_stop>:


void i2c_stop (void) {
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
 6b8:	84 e9       	ldi	r24, 0x94	; 148
 6ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(TWCR & (1 << TWSTO));
 6be:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 6c2:	84 fd       	sbrc	r24, 4
 6c4:	fc cf       	rjmp	.-8      	; 0x6be <i2c_stop+0x6>
}
 6c6:	08 95       	ret

Disassembly of section .text.i2c_controller_transmit:

000003b8 <i2c_controller_transmit>:
		return TW_STATUS;
	}
	
	return 0;
	
}
 3b8:	ff 92       	push	r15
 3ba:	0f 93       	push	r16
 3bc:	1f 93       	push	r17
 3be:	cf 93       	push	r28
 3c0:	df 93       	push	r29
 3c2:	8b 01       	movw	r16, r22
 3c4:	d4 2f       	mov	r29, r20
 3c6:	f2 2e       	mov	r15, r18
 3c8:	60 e0       	ldi	r22, 0x00	; 0
 3ca:	0e 94 74 01 	call	0x2e8	; 0x2e8 <i2c_start>
 3ce:	81 11       	cpse	r24, r1
 3d0:	1c c0       	rjmp	.+56     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 3d2:	d2 30       	cpi	r29, 0x02	; 2
 3d4:	48 f4       	brcc	.+18     	; 0x3e8 <i2c_controller_transmit+0x30>
 3d6:	0c c0       	rjmp	.+24     	; 0x3f0 <i2c_controller_transmit+0x38>
 3d8:	f8 01       	movw	r30, r16
 3da:	ec 0f       	add	r30, r28
 3dc:	f1 1d       	adc	r31, r1
 3de:	80 81       	ld	r24, Z
 3e0:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <i2c_write>
 3e4:	cf 5f       	subi	r28, 0xFF	; 255
 3e6:	01 c0       	rjmp	.+2      	; 0x3ea <i2c_controller_transmit+0x32>
 3e8:	c0 e0       	ldi	r28, 0x00	; 0
 3ea:	cd 17       	cp	r28, r29
 3ec:	a8 f3       	brcs	.-22     	; 0x3d8 <i2c_controller_transmit+0x20>
 3ee:	04 c0       	rjmp	.+8      	; 0x3f8 <i2c_controller_transmit+0x40>
 3f0:	f8 01       	movw	r30, r16
 3f2:	80 81       	ld	r24, Z
 3f4:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <i2c_write>
 3f8:	81 11       	cpse	r24, r1
 3fa:	07 c0       	rjmp	.+14     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 3fc:	f1 10       	cpse	r15, r1
 3fe:	04 c0       	rjmp	.+8      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 400:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <i2c_stop>
 404:	80 e0       	ldi	r24, 0x00	; 0
 406:	01 c0       	rjmp	.+2      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 408:	80 e0       	ldi	r24, 0x00	; 0
 40a:	df 91       	pop	r29
 40c:	cf 91       	pop	r28
 40e:	1f 91       	pop	r17
 410:	0f 91       	pop	r16
 412:	ff 90       	pop	r15
 414:	08 95       	ret

Disassembly of section .text.i2c_controller_receive:

00000276 <i2c_controller_receive>:
 276:	ef 92       	push	r14
 278:	ff 92       	push	r15
 27a:	0f 93       	push	r16
 27c:	1f 93       	push	r17
 27e:	cf 93       	push	r28
 280:	df 93       	push	r29
 282:	8b 01       	movw	r16, r22
 284:	d4 2f       	mov	r29, r20
 286:	61 e0       	ldi	r22, 0x01	; 1
 288:	0e 94 74 01 	call	0x2e8	; 0x2e8 <i2c_start>
 28c:	88 23       	and	r24, r24
 28e:	71 f0       	breq	.+28     	; 0x2ac <i2c_controller_receive+0x36>
 290:	68 2f       	mov	r22, r24
 292:	70 e0       	ldi	r23, 0x00	; 0
 294:	80 e0       	ldi	r24, 0x00	; 0
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	20 c0       	rjmp	.+64     	; 0x2da <i2c_controller_receive+0x64>
 29a:	78 01       	movw	r14, r16
 29c:	ec 0e       	add	r14, r28
 29e:	f1 1c       	adc	r15, r1
 2a0:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <i2c_readACK>
 2a4:	f7 01       	movw	r30, r14
 2a6:	80 83       	st	Z, r24
 2a8:	cf 5f       	subi	r28, 0xFF	; 255
 2aa:	01 c0       	rjmp	.+2      	; 0x2ae <i2c_controller_receive+0x38>
 2ac:	c0 e0       	ldi	r28, 0x00	; 0
 2ae:	2c 2f       	mov	r18, r28
 2b0:	30 e0       	ldi	r19, 0x00	; 0
 2b2:	8d 2f       	mov	r24, r29
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	01 97       	sbiw	r24, 0x01	; 1
 2b8:	28 17       	cp	r18, r24
 2ba:	39 07       	cpc	r19, r25
 2bc:	74 f3       	brlt	.-36     	; 0x29a <i2c_controller_receive+0x24>
 2be:	8d 2f       	mov	r24, r29
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	01 97       	sbiw	r24, 0x01	; 1
 2c4:	e8 01       	movw	r28, r16
 2c6:	c8 0f       	add	r28, r24
 2c8:	d9 1f       	adc	r29, r25
 2ca:	0e 94 f7 02 	call	0x5ee	; 0x5ee <i2c_readNACK>
 2ce:	88 83       	st	Y, r24
 2d0:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <i2c_stop>
 2d4:	60 e0       	ldi	r22, 0x00	; 0
 2d6:	70 e0       	ldi	r23, 0x00	; 0
 2d8:	cb 01       	movw	r24, r22
 2da:	df 91       	pop	r29
 2dc:	cf 91       	pop	r28
 2de:	1f 91       	pop	r17
 2e0:	0f 91       	pop	r16
 2e2:	ff 90       	pop	r15
 2e4:	ef 90       	pop	r14
 2e6:	08 95       	ret

Disassembly of section .text.main:

000001f2 <main>:
#include "i2c.h"
#include "max17263.h"
#include "max17263_regmap.h"


int main(void){
 1f2:	cf 93       	push	r28
 1f4:	df 93       	push	r29
 1f6:	cd b7       	in	r28, 0x3d	; 61
 1f8:	de b7       	in	r29, 0x3e	; 62
 1fa:	68 97       	sbiw	r28, 0x18	; 24
 1fc:	0f b6       	in	r0, 0x3f	; 63
 1fe:	f8 94       	cli
 200:	de bf       	out	0x3e, r29	; 62
 202:	0f be       	out	0x3f, r0	; 63
 204:	cd bf       	out	0x3d, r28	; 61
	
	uint16_t data;
	Max17263_t max;
	
	// disable pullups SDA, SCL
	DDRD  |= ((1 << PORTD0) | (1 << PORTD1));
 206:	8a b1       	in	r24, 0x0a	; 10
 208:	83 60       	ori	r24, 0x03	; 3
 20a:	8a b9       	out	0x0a, r24	; 10
	//PORTD |= ((1 << PORTD0) | (1 << PORTD1));
	PORTD &= ~((1 << PORTD0) | (1 << PORTD1));
 20c:	8b b1       	in	r24, 0x0b	; 11
 20e:	8c 7f       	andi	r24, 0xFC	; 252
 210:	8b b9       	out	0x0b, r24	; 11
	DDRD  &= ~((1 << PORTD0) | (1 << PORTD1));
 212:	8a b1       	in	r24, 0x0a	; 10
 214:	8c 7f       	andi	r24, 0xFC	; 252
 216:	8a b9       	out	0x0a, r24	; 10

	i2c_init(F_CPU, I2C_SCL_400KHZ);
 218:	20 e8       	ldi	r18, 0x80	; 128
 21a:	3a e1       	ldi	r19, 0x1A	; 26
 21c:	46 e0       	ldi	r20, 0x06	; 6
 21e:	50 e0       	ldi	r21, 0x00	; 0
 220:	60 e0       	ldi	r22, 0x00	; 0
 222:	72 e1       	ldi	r23, 0x12	; 18
 224:	8a e7       	ldi	r24, 0x7A	; 122
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	0e 94 41 03 	call	0x682	; 0x682 <i2c_init>
	
	if (DEBUG)
		max_debugWrite(DEBUG_ADDR, DEBUG_STARTUP_CODE);
 22c:	6a ea       	ldi	r22, 0xAA	; 170
 22e:	7a ea       	ldi	r23, 0xAA	; 170
 230:	89 e6       	ldi	r24, 0x69	; 105
 232:	0e 94 0a 03 	call	0x614	; 0x614 <max_debugWrite>
	
	max.config.designcap = 0x0960;
 236:	80 e6       	ldi	r24, 0x60	; 96
 238:	99 e0       	ldi	r25, 0x09	; 9
 23a:	9a 83       	std	Y+2, r25	; 0x02
 23c:	89 83       	std	Y+1, r24	; 0x01
	max.config.ichgterm = IchgTerm_DEF;
 23e:	80 e4       	ldi	r24, 0x40	; 64
 240:	96 e0       	ldi	r25, 0x06	; 6
 242:	9c 83       	std	Y+4, r25	; 0x04
 244:	8b 83       	std	Y+3, r24	; 0x03
	max.config.vempty = Vempty_DEF;
 246:	81 e6       	ldi	r24, 0x61	; 97
 248:	95 ea       	ldi	r25, 0xA5	; 165
 24a:	9e 83       	std	Y+6, r25	; 0x06
 24c:	8d 83       	std	Y+5, r24	; 0x05
	max.config.modelcfg = REFRESH | R100;
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	90 ea       	ldi	r25, 0xA0	; 160
 252:	98 87       	std	Y+8, r25	; 0x08
 254:	8f 83       	std	Y+7, r24	; 0x07
	max_loadConfig(&max);
 256:	ce 01       	movw	r24, r28
 258:	01 96       	adiw	r24, 0x01	; 1
 25a:	0e 94 62 00 	call	0xc4	; 0xc4 <__data_load_end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 25e:	2f ef       	ldi	r18, 0xFF	; 255
 260:	80 e7       	ldi	r24, 0x70	; 112
 262:	92 e0       	ldi	r25, 0x02	; 2
 264:	21 50       	subi	r18, 0x01	; 1
 266:	80 40       	sbci	r24, 0x00	; 0
 268:	90 40       	sbci	r25, 0x00	; 0
 26a:	e1 f7       	brne	.-8      	; 0x264 <main+0x72>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <main+0x7c>
 26e:	00 00       	nop
	
	_delay_ms(100);
	
	
	while(1) {
		max_debugLED();
 270:	0e 94 a8 01 	call	0x350	; 0x350 <max_debugLED>
 274:	fd cf       	rjmp	.-6      	; 0x270 <main+0x7e>

Disassembly of section .text.max_readRegister:

000004f4 <max_readRegister>:
	uint8_t tx_buffer[2];
	rx_data = max_readRegister(reg);
	tx_buffer[0] = (uint8_t)((rx_data & 0x00FF));
	tx_buffer[1] = (uint8_t)((rx_data >> 8) & 0x00FF);
	i2c_controller_transmit(addr, tx_buffer, 2, I2C_NO_REPEAT);
}
 4f4:	cf 93       	push	r28
 4f6:	df 93       	push	r29
 4f8:	00 d0       	rcall	.+0      	; 0x4fa <max_readRegister+0x6>
 4fa:	cd b7       	in	r28, 0x3d	; 61
 4fc:	de b7       	in	r29, 0x3e	; 62
 4fe:	89 83       	std	Y+1, r24	; 0x01
 500:	21 e0       	ldi	r18, 0x01	; 1
 502:	41 e0       	ldi	r20, 0x01	; 1
 504:	be 01       	movw	r22, r28
 506:	6f 5f       	subi	r22, 0xFF	; 255
 508:	7f 4f       	sbci	r23, 0xFF	; 255
 50a:	86 e3       	ldi	r24, 0x36	; 54
 50c:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <i2c_controller_transmit>
 510:	42 e0       	ldi	r20, 0x02	; 2
 512:	be 01       	movw	r22, r28
 514:	6f 5f       	subi	r22, 0xFF	; 255
 516:	7f 4f       	sbci	r23, 0xFF	; 255
 518:	86 e3       	ldi	r24, 0x36	; 54
 51a:	0e 94 3b 01 	call	0x276	; 0x276 <i2c_controller_receive>
 51e:	8a 81       	ldd	r24, Y+2	; 0x02
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	98 2f       	mov	r25, r24
 524:	88 27       	eor	r24, r24
 526:	29 81       	ldd	r18, Y+1	; 0x01
 528:	82 2b       	or	r24, r18
 52a:	0f 90       	pop	r0
 52c:	0f 90       	pop	r0
 52e:	df 91       	pop	r29
 530:	cf 91       	pop	r28
 532:	08 95       	ret

Disassembly of section .text.max_writeRegister:

00000572 <max_writeRegister>:
 572:	cf 93       	push	r28
 574:	df 93       	push	r29
 576:	00 d0       	rcall	.+0      	; 0x578 <max_writeRegister+0x6>
 578:	0f 92       	push	r0
 57a:	cd b7       	in	r28, 0x3d	; 61
 57c:	de b7       	in	r29, 0x3e	; 62
 57e:	89 83       	std	Y+1, r24	; 0x01
 580:	6a 83       	std	Y+2, r22	; 0x02
 582:	7b 83       	std	Y+3, r23	; 0x03
 584:	20 e0       	ldi	r18, 0x00	; 0
 586:	43 e0       	ldi	r20, 0x03	; 3
 588:	be 01       	movw	r22, r28
 58a:	6f 5f       	subi	r22, 0xFF	; 255
 58c:	7f 4f       	sbci	r23, 0xFF	; 255
 58e:	86 e3       	ldi	r24, 0x36	; 54
 590:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <i2c_controller_transmit>
 594:	0f 90       	pop	r0
 596:	0f 90       	pop	r0
 598:	0f 90       	pop	r0
 59a:	df 91       	pop	r29
 59c:	cf 91       	pop	r28
 59e:	08 95       	ret

Disassembly of section .text.max_writeAndVerifyRegister:

00000534 <max_writeAndVerifyRegister>:
 534:	0f 93       	push	r16
 536:	1f 93       	push	r17
 538:	cf 93       	push	r28
 53a:	df 93       	push	r29
 53c:	d8 2f       	mov	r29, r24
 53e:	8b 01       	movw	r16, r22
 540:	c0 e0       	ldi	r28, 0x00	; 0
 542:	b8 01       	movw	r22, r16
 544:	8d 2f       	mov	r24, r29
 546:	0e 94 b9 02 	call	0x572	; 0x572 <max_writeRegister>
 54a:	8f ec       	ldi	r24, 0xCF	; 207
 54c:	97 e0       	ldi	r25, 0x07	; 7
 54e:	01 97       	sbiw	r24, 0x01	; 1
 550:	f1 f7       	brne	.-4      	; 0x54e <max_writeAndVerifyRegister+0x1a>
 552:	00 c0       	rjmp	.+0      	; 0x554 <max_writeAndVerifyRegister+0x20>
 554:	00 00       	nop
 556:	8d 2f       	mov	r24, r29
 558:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <max_readRegister>
 55c:	cf 5f       	subi	r28, 0xFF	; 255
 55e:	08 17       	cp	r16, r24
 560:	19 07       	cpc	r17, r25
 562:	11 f0       	breq	.+4      	; 0x568 <max_writeAndVerifyRegister+0x34>
 564:	c3 30       	cpi	r28, 0x03	; 3
 566:	68 f3       	brcs	.-38     	; 0x542 <max_writeAndVerifyRegister+0xe>
 568:	df 91       	pop	r29
 56a:	cf 91       	pop	r28
 56c:	1f 91       	pop	r17
 56e:	0f 91       	pop	r16
 570:	08 95       	ret

Disassembly of section .text.max_debugWrite:

00000614 <max_debugWrite>:
 *
 * @ param addr : i2c address for receiver
 * @ param data : data to send
 *
 ***********************************************************/
void max_debugWrite(uint8_t addr, uint16_t data) {
 614:	cf 93       	push	r28
 616:	df 93       	push	r29
 618:	00 d0       	rcall	.+0      	; 0x61a <max_debugWrite+0x6>
 61a:	cd b7       	in	r28, 0x3d	; 61
 61c:	de b7       	in	r29, 0x3e	; 62
	uint8_t buffer[2];
	buffer[0] = (uint8_t)((data & 0x00FF));
 61e:	69 83       	std	Y+1, r22	; 0x01
	buffer[1] = (uint8_t)((data >> 8) & 0x00FF);
 620:	7a 83       	std	Y+2, r23	; 0x02
	i2c_controller_transmit(addr, buffer, 2, I2C_NO_REPEAT);
 622:	20 e0       	ldi	r18, 0x00	; 0
 624:	42 e0       	ldi	r20, 0x02	; 2
 626:	be 01       	movw	r22, r28
 628:	6f 5f       	subi	r22, 0xFF	; 255
 62a:	7f 4f       	sbci	r23, 0xFF	; 255
 62c:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <i2c_controller_transmit>
}
 630:	0f 90       	pop	r0
 632:	0f 90       	pop	r0
 634:	df 91       	pop	r29
 636:	cf 91       	pop	r28
 638:	08 95       	ret

Disassembly of section .text.max_debugLED:

00000350 <max_debugLED>:
	uint8_t tx_buffer[2];
	rx_data = max_readRegister(reg);
	tx_buffer[0] = (uint8_t)((rx_data & 0x00FF));
	tx_buffer[1] = (uint8_t)((rx_data >> 8) & 0x00FF);
	i2c_controller_transmit(addr, tx_buffer, 2, I2C_NO_REPEAT);
}
 350:	cf 93       	push	r28
 352:	60 e0       	ldi	r22, 0x00	; 0
 354:	70 e2       	ldi	r23, 0x20	; 32
 356:	87 e3       	ldi	r24, 0x37	; 55
 358:	0e 94 b9 02 	call	0x572	; 0x572 <max_writeRegister>
 35c:	c0 e0       	ldi	r28, 0x00	; 0
 35e:	15 c0       	rjmp	.+42     	; 0x38a <max_debugLED+0x3a>
 360:	61 e0       	ldi	r22, 0x01	; 1
 362:	70 e0       	ldi	r23, 0x00	; 0
 364:	0c 2e       	mov	r0, r28
 366:	02 c0       	rjmp	.+4      	; 0x36c <max_debugLED+0x1c>
 368:	66 0f       	add	r22, r22
 36a:	77 1f       	adc	r23, r23
 36c:	0a 94       	dec	r0
 36e:	e2 f7       	brpl	.-8      	; 0x368 <max_debugLED+0x18>
 370:	84 e6       	ldi	r24, 0x64	; 100
 372:	0e 94 b9 02 	call	0x572	; 0x572 <max_writeRegister>
 376:	2f ef       	ldi	r18, 0xFF	; 255
 378:	89 e6       	ldi	r24, 0x69	; 105
 37a:	98 e1       	ldi	r25, 0x18	; 24
 37c:	21 50       	subi	r18, 0x01	; 1
 37e:	80 40       	sbci	r24, 0x00	; 0
 380:	90 40       	sbci	r25, 0x00	; 0
 382:	e1 f7       	brne	.-8      	; 0x37c <max_debugLED+0x2c>
 384:	00 c0       	rjmp	.+0      	; 0x386 <max_debugLED+0x36>
 386:	00 00       	nop
 388:	cf 5f       	subi	r28, 0xFF	; 255
 38a:	c4 30       	cpi	r28, 0x04	; 4
 38c:	48 f3       	brcs	.-46     	; 0x360 <max_debugLED+0x10>
 38e:	60 e0       	ldi	r22, 0x00	; 0
 390:	70 e0       	ldi	r23, 0x00	; 0
 392:	84 e6       	ldi	r24, 0x64	; 100
 394:	0e 94 b9 02 	call	0x572	; 0x572 <max_writeRegister>
 398:	60 e0       	ldi	r22, 0x00	; 0
 39a:	70 e8       	ldi	r23, 0x80	; 128
 39c:	87 e3       	ldi	r24, 0x37	; 55
 39e:	0e 94 b9 02 	call	0x572	; 0x572 <max_writeRegister>
 3a2:	2f ef       	ldi	r18, 0xFF	; 255
 3a4:	89 e6       	ldi	r24, 0x69	; 105
 3a6:	98 e1       	ldi	r25, 0x18	; 24
 3a8:	21 50       	subi	r18, 0x01	; 1
 3aa:	80 40       	sbci	r24, 0x00	; 0
 3ac:	90 40       	sbci	r25, 0x00	; 0
 3ae:	e1 f7       	brne	.-8      	; 0x3a8 <max_debugLED+0x58>
 3b0:	00 c0       	rjmp	.+0      	; 0x3b2 <max_debugLED+0x62>
 3b2:	00 00       	nop
 3b4:	cf 91       	pop	r28
 3b6:	08 95       	ret

Disassembly of section .text.max_eepromSaveParameters:

00000468 <max_eepromSaveParameters>:
 468:	cf 93       	push	r28
 46a:	df 93       	push	r29
 46c:	ec 01       	movw	r28, r24
 46e:	6e 85       	ldd	r22, Y+14	; 0x0e
 470:	7f 85       	ldd	r23, Y+15	; 0x0f
 472:	82 e0       	ldi	r24, 0x02	; 2
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <eeprom_update_word>
 47a:	68 89       	ldd	r22, Y+16	; 0x10
 47c:	79 89       	ldd	r23, Y+17	; 0x11
 47e:	84 e0       	ldi	r24, 0x04	; 4
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <eeprom_update_word>
 486:	6a 89       	ldd	r22, Y+18	; 0x12
 488:	7b 89       	ldd	r23, Y+19	; 0x13
 48a:	86 e0       	ldi	r24, 0x06	; 6
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <eeprom_update_word>
 492:	6c 89       	ldd	r22, Y+20	; 0x14
 494:	7d 89       	ldd	r23, Y+21	; 0x15
 496:	88 e0       	ldi	r24, 0x08	; 8
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <eeprom_update_word>
 49e:	6e 89       	ldd	r22, Y+22	; 0x16
 4a0:	7f 89       	ldd	r23, Y+23	; 0x17
 4a2:	8a e0       	ldi	r24, 0x0A	; 10
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <eeprom_update_word>
 4aa:	df 91       	pop	r29
 4ac:	cf 91       	pop	r28
 4ae:	08 95       	ret

Disassembly of section .text.max_eepromLoadParameters:

00000416 <max_eepromLoadParameters>:
 416:	cf 93       	push	r28
 418:	df 93       	push	r29
 41a:	ec 01       	movw	r28, r24
 41c:	62 e0       	ldi	r22, 0x02	; 2
 41e:	70 e0       	ldi	r23, 0x00	; 0
 420:	80 e8       	ldi	r24, 0x80	; 128
 422:	0e 94 64 03 	call	0x6c8	; 0x6c8 <eeprom_read_word>
 426:	9f 87       	std	Y+15, r25	; 0x0f
 428:	8e 87       	std	Y+14, r24	; 0x0e
 42a:	64 e0       	ldi	r22, 0x04	; 4
 42c:	70 e0       	ldi	r23, 0x00	; 0
 42e:	80 e8       	ldi	r24, 0x80	; 128
 430:	0e 94 64 03 	call	0x6c8	; 0x6c8 <eeprom_read_word>
 434:	99 8b       	std	Y+17, r25	; 0x11
 436:	88 8b       	std	Y+16, r24	; 0x10
 438:	66 e0       	ldi	r22, 0x06	; 6
 43a:	70 e0       	ldi	r23, 0x00	; 0
 43c:	80 e8       	ldi	r24, 0x80	; 128
 43e:	0e 94 64 03 	call	0x6c8	; 0x6c8 <eeprom_read_word>
 442:	9b 8b       	std	Y+19, r25	; 0x13
 444:	8a 8b       	std	Y+18, r24	; 0x12
 446:	68 e0       	ldi	r22, 0x08	; 8
 448:	70 e0       	ldi	r23, 0x00	; 0
 44a:	80 e8       	ldi	r24, 0x80	; 128
 44c:	0e 94 64 03 	call	0x6c8	; 0x6c8 <eeprom_read_word>
 450:	9d 8b       	std	Y+21, r25	; 0x15
 452:	8c 8b       	std	Y+20, r24	; 0x14
 454:	6a e0       	ldi	r22, 0x0A	; 10
 456:	70 e0       	ldi	r23, 0x00	; 0
 458:	80 e8       	ldi	r24, 0x80	; 128
 45a:	0e 94 64 03 	call	0x6c8	; 0x6c8 <eeprom_read_word>
 45e:	9f 8b       	std	Y+23, r25	; 0x17
 460:	8e 8b       	std	Y+22, r24	; 0x16
 462:	df 91       	pop	r29
 464:	cf 91       	pop	r28
 466:	08 95       	ret

Disassembly of section .text.max_loadConfig:

000000c4 <max_loadConfig>:
  c4:	ff 92       	push	r15
  c6:	0f 93       	push	r16
  c8:	1f 93       	push	r17
  ca:	cf 93       	push	r28
  cc:	df 93       	push	r29
  ce:	ec 01       	movw	r28, r24
  d0:	60 e0       	ldi	r22, 0x00	; 0
  d2:	70 e0       	ldi	r23, 0x00	; 0
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	0e 94 64 03 	call	0x6c8	; 0x6c8 <eeprom_read_word>
  da:	8f 3e       	cpi	r24, 0xEF	; 239
  dc:	9e 4b       	sbci	r25, 0xBE	; 190
  de:	11 f4       	brne	.+4      	; 0xe4 <max_loadConfig+0x20>
  e0:	f1 2c       	mov	r15, r1
  e2:	09 c0       	rjmp	.+18     	; 0xf6 <max_loadConfig+0x32>
  e4:	ff 24       	eor	r15, r15
  e6:	f3 94       	inc	r15
  e8:	06 c0       	rjmp	.+12     	; 0xf6 <max_loadConfig+0x32>
  ea:	8f e1       	ldi	r24, 0x1F	; 31
  ec:	9e e4       	ldi	r25, 0x4E	; 78
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <max_loadConfig+0x2a>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <max_loadConfig+0x30>
  f4:	00 00       	nop
  f6:	8d e3       	ldi	r24, 0x3D	; 61
  f8:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <max_readRegister>
  fc:	80 fd       	sbrc	r24, 0
  fe:	f5 cf       	rjmp	.-22     	; 0xea <max_loadConfig+0x26>
 100:	8a eb       	ldi	r24, 0xBA	; 186
 102:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <max_readRegister>
 106:	8c 01       	movw	r16, r24
 108:	60 e0       	ldi	r22, 0x00	; 0
 10a:	70 e0       	ldi	r23, 0x00	; 0
 10c:	80 e6       	ldi	r24, 0x60	; 96
 10e:	0e 94 b9 02 	call	0x572	; 0x572 <max_writeRegister>
 112:	60 e0       	ldi	r22, 0x00	; 0
 114:	70 e0       	ldi	r23, 0x00	; 0
 116:	8a eb       	ldi	r24, 0xBA	; 186
 118:	0e 94 b9 02 	call	0x572	; 0x572 <max_writeRegister>
 11c:	60 e9       	ldi	r22, 0x90	; 144
 11e:	70 e0       	ldi	r23, 0x00	; 0
 120:	80 e6       	ldi	r24, 0x60	; 96
 122:	0e 94 b9 02 	call	0x572	; 0x572 <max_writeRegister>
 126:	68 81       	ld	r22, Y
 128:	79 81       	ldd	r23, Y+1	; 0x01
 12a:	88 e1       	ldi	r24, 0x18	; 24
 12c:	0e 94 b9 02 	call	0x572	; 0x572 <max_writeRegister>
 130:	6a 81       	ldd	r22, Y+2	; 0x02
 132:	7b 81       	ldd	r23, Y+3	; 0x03
 134:	8e e1       	ldi	r24, 0x1E	; 30
 136:	0e 94 b9 02 	call	0x572	; 0x572 <max_writeRegister>
 13a:	6c 81       	ldd	r22, Y+4	; 0x04
 13c:	7d 81       	ldd	r23, Y+5	; 0x05
 13e:	8a e3       	ldi	r24, 0x3A	; 58
 140:	0e 94 b9 02 	call	0x572	; 0x572 <max_writeRegister>
 144:	6e 81       	ldd	r22, Y+6	; 0x06
 146:	7f 81       	ldd	r23, Y+7	; 0x07
 148:	8b ed       	ldi	r24, 0xDB	; 219
 14a:	0e 94 b9 02 	call	0x572	; 0x572 <max_writeRegister>
 14e:	06 c0       	rjmp	.+12     	; 0x15c <max_loadConfig+0x98>
 150:	8f e1       	ldi	r24, 0x1F	; 31
 152:	9e e4       	ldi	r25, 0x4E	; 78
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <max_loadConfig+0x90>
 158:	00 c0       	rjmp	.+0      	; 0x15a <max_loadConfig+0x96>
 15a:	00 00       	nop
 15c:	8b ed       	ldi	r24, 0xDB	; 219
 15e:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <max_readRegister>
 162:	99 23       	and	r25, r25
 164:	ac f3       	brlt	.-22     	; 0x150 <max_loadConfig+0x8c>
 166:	ff 20       	and	r15, r15
 168:	b1 f0       	breq	.+44     	; 0x196 <max_loadConfig+0xd2>
 16a:	88 e3       	ldi	r24, 0x38	; 56
 16c:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <max_readRegister>
 170:	9f 87       	std	Y+15, r25	; 0x0f
 172:	8e 87       	std	Y+14, r24	; 0x0e
 174:	89 e3       	ldi	r24, 0x39	; 57
 176:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <max_readRegister>
 17a:	99 8b       	std	Y+17, r25	; 0x11
 17c:	88 8b       	std	Y+16, r24	; 0x10
 17e:	88 81       	ld	r24, Y
 180:	99 81       	ldd	r25, Y+1	; 0x01
 182:	9b 8b       	std	Y+19, r25	; 0x13
 184:	8a 8b       	std	Y+18, r24	; 0x12
 186:	1d 8a       	std	Y+21, r1	; 0x15
 188:	1c 8a       	std	Y+20, r1	; 0x14
 18a:	9f 8b       	std	Y+23, r25	; 0x17
 18c:	8e 8b       	std	Y+22, r24	; 0x16
 18e:	ce 01       	movw	r24, r28
 190:	0e 94 34 02 	call	0x468	; 0x468 <max_eepromSaveParameters>
 194:	03 c0       	rjmp	.+6      	; 0x19c <max_loadConfig+0xd8>
 196:	ce 01       	movw	r24, r28
 198:	0e 94 0b 02 	call	0x416	; 0x416 <max_eepromLoadParameters>
 19c:	6e 85       	ldd	r22, Y+14	; 0x0e
 19e:	7f 85       	ldd	r23, Y+15	; 0x0f
 1a0:	88 e3       	ldi	r24, 0x38	; 56
 1a2:	0e 94 b9 02 	call	0x572	; 0x572 <max_writeRegister>
 1a6:	68 89       	ldd	r22, Y+16	; 0x10
 1a8:	79 89       	ldd	r23, Y+17	; 0x11
 1aa:	89 e3       	ldi	r24, 0x39	; 57
 1ac:	0e 94 b9 02 	call	0x572	; 0x572 <max_writeRegister>
 1b0:	6a 89       	ldd	r22, Y+18	; 0x12
 1b2:	7b 89       	ldd	r23, Y+19	; 0x13
 1b4:	80 e1       	ldi	r24, 0x10	; 16
 1b6:	0e 94 b9 02 	call	0x572	; 0x572 <max_writeRegister>
 1ba:	6c 89       	ldd	r22, Y+20	; 0x14
 1bc:	7d 89       	ldd	r23, Y+21	; 0x15
 1be:	87 e1       	ldi	r24, 0x17	; 23
 1c0:	0e 94 b9 02 	call	0x572	; 0x572 <max_writeRegister>
 1c4:	6e 89       	ldd	r22, Y+22	; 0x16
 1c6:	7f 89       	ldd	r23, Y+23	; 0x17
 1c8:	83 e2       	ldi	r24, 0x23	; 35
 1ca:	0e 94 b9 02 	call	0x572	; 0x572 <max_writeRegister>
 1ce:	b8 01       	movw	r22, r16
 1d0:	8a eb       	ldi	r24, 0xBA	; 186
 1d2:	0e 94 b9 02 	call	0x572	; 0x572 <max_writeRegister>
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <max_readRegister>
 1dc:	bc 01       	movw	r22, r24
 1de:	6d 7f       	andi	r22, 0xFD	; 253
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	0e 94 9a 02 	call	0x534	; 0x534 <max_writeAndVerifyRegister>
 1e6:	df 91       	pop	r29
 1e8:	cf 91       	pop	r28
 1ea:	1f 91       	pop	r17
 1ec:	0f 91       	pop	r16
 1ee:	ff 90       	pop	r15
 1f0:	08 95       	ret

Disassembly of section .text.libgcc.div:

000004b0 <__udivmodsi4>:
 4b0:	a1 e2       	ldi	r26, 0x21	; 33
 4b2:	1a 2e       	mov	r1, r26
 4b4:	aa 1b       	sub	r26, r26
 4b6:	bb 1b       	sub	r27, r27
 4b8:	fd 01       	movw	r30, r26
 4ba:	0d c0       	rjmp	.+26     	; 0x4d6 <__udivmodsi4_ep>

000004bc <__udivmodsi4_loop>:
 4bc:	aa 1f       	adc	r26, r26
 4be:	bb 1f       	adc	r27, r27
 4c0:	ee 1f       	adc	r30, r30
 4c2:	ff 1f       	adc	r31, r31
 4c4:	a2 17       	cp	r26, r18
 4c6:	b3 07       	cpc	r27, r19
 4c8:	e4 07       	cpc	r30, r20
 4ca:	f5 07       	cpc	r31, r21
 4cc:	20 f0       	brcs	.+8      	; 0x4d6 <__udivmodsi4_ep>
 4ce:	a2 1b       	sub	r26, r18
 4d0:	b3 0b       	sbc	r27, r19
 4d2:	e4 0b       	sbc	r30, r20
 4d4:	f5 0b       	sbc	r31, r21

000004d6 <__udivmodsi4_ep>:
 4d6:	66 1f       	adc	r22, r22
 4d8:	77 1f       	adc	r23, r23
 4da:	88 1f       	adc	r24, r24
 4dc:	99 1f       	adc	r25, r25
 4de:	1a 94       	dec	r1
 4e0:	69 f7       	brne	.-38     	; 0x4bc <__udivmodsi4_loop>
 4e2:	60 95       	com	r22
 4e4:	70 95       	com	r23
 4e6:	80 95       	com	r24
 4e8:	90 95       	com	r25
 4ea:	9b 01       	movw	r18, r22
 4ec:	ac 01       	movw	r20, r24
 4ee:	bd 01       	movw	r22, r26
 4f0:	cf 01       	movw	r24, r30
 4f2:	08 95       	ret

Disassembly of section .text.__dummy_fini:

000006ea <_fini>:
 6ea:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000006ec <__funcs_on_exit>:
 6ec:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000006ee <__simulator_exit>:
 6ee:	08 95       	ret

Disassembly of section .text.exit:

000006a2 <exit>:
 6a2:	ec 01       	movw	r28, r24
 6a4:	0e 94 76 03 	call	0x6ec	; 0x6ec <__funcs_on_exit>
 6a8:	0e 94 75 03 	call	0x6ea	; 0x6ea <_fini>
 6ac:	ce 01       	movw	r24, r28
 6ae:	0e 94 77 03 	call	0x6ee	; 0x6ee <__simulator_exit>
 6b2:	ce 01       	movw	r24, r28
 6b4:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_Exit>

Disassembly of section .text._Exit:

000006e6 <_Exit>:
 6e6:	0e 94 60 00 	call	0xc0	; 0xc0 <_exit>

Disassembly of section .text.avrlibc:

000006c8 <eeprom_read_word>:
 6c8:	cb 01       	movw	r24, r22
 6ca:	a8 e1       	ldi	r26, 0x18	; 24
 6cc:	b0 e0       	ldi	r27, 0x00	; 0
 6ce:	42 e0       	ldi	r20, 0x02	; 2
 6d0:	50 e0       	ldi	r21, 0x00	; 0
 6d2:	0c 94 21 03 	jmp	0x642	; 0x642 <eeprom_read_blraw>

Disassembly of section .text.avrlibc:

000006d6 <eeprom_update_word>:
 6d6:	01 96       	adiw	r24, 0x01	; 1
 6d8:	27 2f       	mov	r18, r23
 6da:	0e 94 30 03 	call	0x660	; 0x660 <eeprom_update_r18>
 6de:	0c 94 2f 03 	jmp	0x65e	; 0x65e <eeprom_update_byte>

Disassembly of section .text.avrlibc:

0000063a <eeprom_read_block>:
 63a:	ba 01       	movw	r22, r20
 63c:	a9 01       	movw	r20, r18
 63e:	dc 01       	movw	r26, r24
 640:	cb 01       	movw	r24, r22

00000642 <eeprom_read_blraw>:
 642:	fc 01       	movw	r30, r24
 644:	f9 99       	sbic	0x1f, 1	; 31
 646:	fe cf       	rjmp	.-4      	; 0x644 <eeprom_read_blraw+0x2>
 648:	06 c0       	rjmp	.+12     	; 0x656 <eeprom_read_blraw+0x14>
 64a:	f2 bd       	out	0x22, r31	; 34
 64c:	e1 bd       	out	0x21, r30	; 33
 64e:	f8 9a       	sbi	0x1f, 0	; 31
 650:	31 96       	adiw	r30, 0x01	; 1
 652:	00 b4       	in	r0, 0x20	; 32
 654:	0d 92       	st	X+, r0
 656:	41 50       	subi	r20, 0x01	; 1
 658:	50 40       	sbci	r21, 0x00	; 0
 65a:	b8 f7       	brcc	.-18     	; 0x64a <eeprom_read_blraw+0x8>
 65c:	08 95       	ret

Disassembly of section .text.avrlibc:

0000065e <eeprom_update_byte>:
 65e:	26 2f       	mov	r18, r22

00000660 <eeprom_update_r18>:
 660:	f9 99       	sbic	0x1f, 1	; 31
 662:	fe cf       	rjmp	.-4      	; 0x660 <eeprom_update_r18>
 664:	92 bd       	out	0x22, r25	; 34
 666:	81 bd       	out	0x21, r24	; 33
 668:	f8 9a       	sbi	0x1f, 0	; 31
 66a:	01 97       	sbiw	r24, 0x01	; 1
 66c:	00 b4       	in	r0, 0x20	; 32
 66e:	02 16       	cp	r0, r18
 670:	39 f0       	breq	.+14     	; 0x680 <eeprom_update_r18+0x20>
 672:	1f ba       	out	0x1f, r1	; 31
 674:	20 bd       	out	0x20, r18	; 32
 676:	0f b6       	in	r0, 0x3f	; 63
 678:	f8 94       	cli
 67a:	fa 9a       	sbi	0x1f, 2	; 31
 67c:	f9 9a       	sbi	0x1f, 1	; 31
 67e:	0f be       	out	0x3f, r0	; 63
 680:	08 95       	ret
