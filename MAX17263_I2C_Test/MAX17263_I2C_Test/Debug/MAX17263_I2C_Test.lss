
MAX17263_I2C_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000056c  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  0000056c  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000001c  00000000  00000000  0000059b  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  000005b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000161d  00000000  00000000  0000063f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c4d  00000000  00000000  00001c5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006a2  00000000  00000000  000028a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000144  00000000  00000000  00002f4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a9  00000000  00000000  00003090  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000582  00000000  00000000  00003439  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  000039bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000004ea  000004ea  0000055e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003a54  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.fill_buffer 0000006c  00000318  00000318  0000038c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.main    0000015e  000000c4  000000c4  00000138  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.i2c_init 00000020  000004ac  000004ac  00000520  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.i2c_start 00000032  00000406  00000406  0000047a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.i2c_address 0000003e  000003c8  000003c8  0000043c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.i2c_write 00000028  00000438  00000438  000004ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.i2c_readACK 00000026  00000460  00000460  000004d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.i2c_readNACK 00000026  00000486  00000486  000004fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.i2c_stop 00000008  000004e2  000004e2  00000556  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.i2c_controller_transmit 0000006e  000002aa  000002aa  0000031e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.i2c_controller_receive 00000088  00000222  00000222  00000296  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.libgcc.div 00000044  00000384  00000384  000003f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.__dummy_fini 00000002  000004f2  000004f2  00000566  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.__dummy_funcs_on_exit 00000002  000004f4  000004f4  00000568  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.__dummy_simulator_exit 00000002  000004f6  000004f6  0000056a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.exit    00000016  000004cc  000004cc  00000540  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text._Exit   00000004  000004ee  000004ee  00000562  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__bad_interrupt>
   8:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__bad_interrupt>
   c:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__bad_interrupt>
  10:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__bad_interrupt>
  14:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__bad_interrupt>
  18:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__bad_interrupt>
  1c:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__bad_interrupt>
  20:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__bad_interrupt>
  24:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__bad_interrupt>
  28:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__bad_interrupt>
  2c:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__bad_interrupt>
  30:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__bad_interrupt>
  34:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__bad_interrupt>
  38:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__bad_interrupt>
  3c:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__bad_interrupt>
  40:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__bad_interrupt>
  44:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__bad_interrupt>
  48:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__bad_interrupt>
  4c:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__bad_interrupt>
  50:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__bad_interrupt>
  54:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__bad_interrupt>
  58:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__bad_interrupt>
  5c:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__bad_interrupt>
  60:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__bad_interrupt>
  64:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__bad_interrupt>
  68:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__bad_interrupt>
  6c:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__bad_interrupt>
  70:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__bad_interrupt>
  74:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__bad_interrupt>
  78:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__bad_interrupt>
  7c:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__bad_interrupt>
  80:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__bad_interrupt>
  84:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__bad_interrupt>
  88:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__bad_interrupt>
  8c:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__bad_interrupt>
  90:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__bad_interrupt>
  94:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__bad_interrupt>
  98:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__bad_interrupt>
  9c:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__bad_interrupt>
  a0:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__bad_interrupt>
  a4:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__bad_interrupt>
  a8:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61
  b8:	0e 94 62 00 	call	0xc4	; 0xc4 <_etext>
  bc:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <exit>

000000c0 <_exit>:
  c0:	f8 94       	cli

000000c2 <__stop_program>:
  c2:	ff cf       	rjmp	.-2      	; 0xc2 <__stop_program>

Disassembly of section .text:

000004ea <__bad_interrupt>:
 4ea:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.fill_buffer:

00000318 <fill_buffer>:

#define BLINK_DELAY 250
#define DEBUG_ADDR	0x69
#define BUFFER_SIZE	4

void fill_buffer(uint8_t *buff, uint8_t len, uint32_t data) {
 318:	cf 92       	push	r12
 31a:	df 92       	push	r13
 31c:	ef 92       	push	r14
 31e:	ff 92       	push	r15
 320:	0f 93       	push	r16
 322:	1f 93       	push	r17
 324:	dc 01       	movw	r26, r24
 326:	86 2f       	mov	r24, r22
 328:	89 01       	movw	r16, r18
 32a:	9a 01       	movw	r18, r20
	if (len > 2) {
 32c:	63 30       	cpi	r22, 0x03	; 3
 32e:	10 f1       	brcs	.+68     	; 0x374 <fill_buffer+0x5c>
		for (int8_t i = len-1; i > -1; i--) {
 330:	9f ef       	ldi	r25, 0xFF	; 255
 332:	96 0f       	add	r25, r22
 334:	1c c0       	rjmp	.+56     	; 0x36e <fill_buffer+0x56>
			uint32_t temp = data;
			buff[len-i-1] = ((temp >> (i*8)) & 0x000000FF);
 336:	49 2f       	mov	r20, r25
 338:	09 2e       	mov	r0, r25
 33a:	00 0c       	add	r0, r0
 33c:	55 0b       	sbc	r21, r21
 33e:	e8 2f       	mov	r30, r24
 340:	f0 e0       	ldi	r31, 0x00	; 0
 342:	e4 1b       	sub	r30, r20
 344:	f5 0b       	sbc	r31, r21
 346:	31 97       	sbiw	r30, 0x01	; 1
 348:	ea 0f       	add	r30, r26
 34a:	fb 1f       	adc	r31, r27
 34c:	44 0f       	add	r20, r20
 34e:	55 1f       	adc	r21, r21
 350:	44 0f       	add	r20, r20
 352:	55 1f       	adc	r21, r21
 354:	44 0f       	add	r20, r20
 356:	55 1f       	adc	r21, r21
 358:	68 01       	movw	r12, r16
 35a:	79 01       	movw	r14, r18
 35c:	04 c0       	rjmp	.+8      	; 0x366 <fill_buffer+0x4e>
 35e:	f6 94       	lsr	r15
 360:	e7 94       	ror	r14
 362:	d7 94       	ror	r13
 364:	c7 94       	ror	r12
 366:	4a 95       	dec	r20
 368:	d2 f7       	brpl	.-12     	; 0x35e <fill_buffer+0x46>
 36a:	c0 82       	st	Z, r12
#define DEBUG_ADDR	0x69
#define BUFFER_SIZE	4

void fill_buffer(uint8_t *buff, uint8_t len, uint32_t data) {
	if (len > 2) {
		for (int8_t i = len-1; i > -1; i--) {
 36c:	91 50       	subi	r25, 0x01	; 1
 36e:	99 23       	and	r25, r25
 370:	14 f7       	brge	.-60     	; 0x336 <fill_buffer+0x1e>
 372:	01 c0       	rjmp	.+2      	; 0x376 <fill_buffer+0x5e>
			uint32_t temp = data;
			buff[len-i-1] = ((temp >> (i*8)) & 0x000000FF);
		}
	}
	else {
		buff[0] = data;
 374:	0c 93       	st	X, r16
	}
}
 376:	1f 91       	pop	r17
 378:	0f 91       	pop	r16
 37a:	ff 90       	pop	r15
 37c:	ef 90       	pop	r14
 37e:	df 90       	pop	r13
 380:	cf 90       	pop	r12
 382:	08 95       	ret

Disassembly of section .text.main:

000000c4 <main>:


int main(void){
  c4:	cf 93       	push	r28
  c6:	df 93       	push	r29
  c8:	00 d0       	rcall	.+0      	; 0xca <main+0x6>
  ca:	00 d0       	rcall	.+0      	; 0xcc <main+0x8>
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
	uint8_t buffer[BUFFER_SIZE];
	uint8_t err[12];
	
	// init D3 output, high
	// controls LED 5
	PORTD |= (1 << PORTD3);
  d0:	8b b1       	in	r24, 0x0b	; 11
  d2:	88 60       	ori	r24, 0x08	; 8
  d4:	8b b9       	out	0x0b, r24	; 11
	DDRD  |= (1 << PORTD3);
  d6:	8a b1       	in	r24, 0x0a	; 10
  d8:	88 60       	ori	r24, 0x08	; 8
  da:	8a b9       	out	0x0a, r24	; 10
	
	// disable pullups SDA, SCL
	DDRD  |= ((1 << PORTD0) | (1 << PORTD1)); 
  dc:	8a b1       	in	r24, 0x0a	; 10
  de:	83 60       	ori	r24, 0x03	; 3
  e0:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~((1 << PORTD0) | (1 << PORTD1));
  e2:	8b b1       	in	r24, 0x0b	; 11
  e4:	8c 7f       	andi	r24, 0xFC	; 252
  e6:	8b b9       	out	0x0b, r24	; 11
	DDRD  &= ~((1 << PORTD0) | (1 << PORTD1));
  e8:	8a b1       	in	r24, 0x0a	; 10
  ea:	8c 7f       	andi	r24, 0xFC	; 252
  ec:	8a b9       	out	0x0a, r24	; 10

	i2c_init(F_CPU, I2C_SCL_400KHZ);
  ee:	20 e8       	ldi	r18, 0x80	; 128
  f0:	3a e1       	ldi	r19, 0x1A	; 26
  f2:	46 e0       	ldi	r20, 0x06	; 6
  f4:	50 e0       	ldi	r21, 0x00	; 0
  f6:	60 e0       	ldi	r22, 0x00	; 0
  f8:	72 e1       	ldi	r23, 0x12	; 18
  fa:	8a e7       	ldi	r24, 0x7A	; 122
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 56 02 	call	0x4ac	; 0x4ac <i2c_init>
	
	while(1){
		
		buffer[0]= REG_LEDCFG3;
 102:	17 e3       	ldi	r17, 0x37	; 55
 104:	19 83       	std	Y+1, r17	; 0x01
		i2c_controller_transmit(MAX17263_ADDR, buffer, 1, I2C_REPEAT);
 106:	21 e0       	ldi	r18, 0x01	; 1
 108:	41 e0       	ldi	r20, 0x01	; 1
 10a:	be 01       	movw	r22, r28
 10c:	6f 5f       	subi	r22, 0xFF	; 255
 10e:	7f 4f       	sbci	r23, 0xFF	; 255
 110:	86 e3       	ldi	r24, 0x36	; 54
 112:	0e 94 55 01 	call	0x2aa	; 0x2aa <i2c_controller_transmit>
		i2c_controller_receive(MAX17263_ADDR, buffer, 2);
 116:	42 e0       	ldi	r20, 0x02	; 2
 118:	be 01       	movw	r22, r28
 11a:	6f 5f       	subi	r22, 0xFF	; 255
 11c:	7f 4f       	sbci	r23, 0xFF	; 255
 11e:	86 e3       	ldi	r24, 0x36	; 54
 120:	0e 94 11 01 	call	0x222	; 0x222 <i2c_controller_receive>
		i2c_controller_transmit(DEBUG_ADDR, buffer, 2, I2C_NO_REPEAT);	
 124:	20 e0       	ldi	r18, 0x00	; 0
 126:	42 e0       	ldi	r20, 0x02	; 2
 128:	be 01       	movw	r22, r28
 12a:	6f 5f       	subi	r22, 0xFF	; 255
 12c:	7f 4f       	sbci	r23, 0xFF	; 255
 12e:	89 e6       	ldi	r24, 0x69	; 105
 130:	0e 94 55 01 	call	0x2aa	; 0x2aa <i2c_controller_transmit>
		
		buffer[0] = REG_LEDCFG3;	
 134:	19 83       	std	Y+1, r17	; 0x01
		buffer[1] = 0;
 136:	1a 82       	std	Y+2, r1	; 0x02
		buffer[2] = 0b01100000;
 138:	80 e6       	ldi	r24, 0x60	; 96
 13a:	8b 83       	std	Y+3, r24	; 0x03
		i2c_controller_transmit(MAX17263_ADDR, buffer, 3, I2C_NO_REPEAT);
 13c:	20 e0       	ldi	r18, 0x00	; 0
 13e:	43 e0       	ldi	r20, 0x03	; 3
 140:	be 01       	movw	r22, r28
 142:	6f 5f       	subi	r22, 0xFF	; 255
 144:	7f 4f       	sbci	r23, 0xFF	; 255
 146:	86 e3       	ldi	r24, 0x36	; 54
 148:	0e 94 55 01 	call	0x2aa	; 0x2aa <i2c_controller_transmit>
		
		buffer[0]= REG_LEDCFG3;
 14c:	19 83       	std	Y+1, r17	; 0x01
		i2c_controller_transmit(MAX17263_ADDR, buffer, 1, I2C_REPEAT);
 14e:	21 e0       	ldi	r18, 0x01	; 1
 150:	41 e0       	ldi	r20, 0x01	; 1
 152:	be 01       	movw	r22, r28
 154:	6f 5f       	subi	r22, 0xFF	; 255
 156:	7f 4f       	sbci	r23, 0xFF	; 255
 158:	86 e3       	ldi	r24, 0x36	; 54
 15a:	0e 94 55 01 	call	0x2aa	; 0x2aa <i2c_controller_transmit>
		i2c_controller_receive(MAX17263_ADDR, buffer, 2);
 15e:	42 e0       	ldi	r20, 0x02	; 2
 160:	be 01       	movw	r22, r28
 162:	6f 5f       	subi	r22, 0xFF	; 255
 164:	7f 4f       	sbci	r23, 0xFF	; 255
 166:	86 e3       	ldi	r24, 0x36	; 54
 168:	0e 94 11 01 	call	0x222	; 0x222 <i2c_controller_receive>
		i2c_controller_transmit(DEBUG_ADDR, buffer, 2, I2C_NO_REPEAT);
 16c:	20 e0       	ldi	r18, 0x00	; 0
 16e:	42 e0       	ldi	r20, 0x02	; 2
 170:	be 01       	movw	r22, r28
 172:	6f 5f       	subi	r22, 0xFF	; 255
 174:	7f 4f       	sbci	r23, 0xFF	; 255
 176:	89 e6       	ldi	r24, 0x69	; 105
 178:	0e 94 55 01 	call	0x2aa	; 0x2aa <i2c_controller_transmit>
		
		
		for (uint8_t i = 0; i < 4; i++) {
 17c:	10 e0       	ldi	r17, 0x00	; 0
 17e:	34 c0       	rjmp	.+104    	; 0x1e8 <main+0x124>
			buffer[0] = REG_CUSTLED;
 180:	04 e6       	ldi	r16, 0x64	; 100
 182:	09 83       	std	Y+1, r16	; 0x01
			buffer[1] = (1 << i);
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	01 2e       	mov	r0, r17
 188:	01 c0       	rjmp	.+2      	; 0x18c <main+0xc8>
 18a:	88 0f       	add	r24, r24
 18c:	0a 94       	dec	r0
 18e:	ea f7       	brpl	.-6      	; 0x18a <main+0xc6>
 190:	8a 83       	std	Y+2, r24	; 0x02
			buffer[2] = 0;
 192:	1b 82       	std	Y+3, r1	; 0x03
			i2c_controller_transmit(MAX17263_ADDR, buffer, 3, I2C_NO_REPEAT);
 194:	20 e0       	ldi	r18, 0x00	; 0
 196:	43 e0       	ldi	r20, 0x03	; 3
 198:	be 01       	movw	r22, r28
 19a:	6f 5f       	subi	r22, 0xFF	; 255
 19c:	7f 4f       	sbci	r23, 0xFF	; 255
 19e:	86 e3       	ldi	r24, 0x36	; 54
 1a0:	0e 94 55 01 	call	0x2aa	; 0x2aa <i2c_controller_transmit>
			
			buffer[0] = REG_CUSTLED;
 1a4:	09 83       	std	Y+1, r16	; 0x01
			i2c_controller_transmit(MAX17263_ADDR, buffer, 1, I2C_REPEAT);
 1a6:	21 e0       	ldi	r18, 0x01	; 1
 1a8:	41 e0       	ldi	r20, 0x01	; 1
 1aa:	be 01       	movw	r22, r28
 1ac:	6f 5f       	subi	r22, 0xFF	; 255
 1ae:	7f 4f       	sbci	r23, 0xFF	; 255
 1b0:	86 e3       	ldi	r24, 0x36	; 54
 1b2:	0e 94 55 01 	call	0x2aa	; 0x2aa <i2c_controller_transmit>
			i2c_controller_receive(MAX17263_ADDR, buffer, 2);
 1b6:	42 e0       	ldi	r20, 0x02	; 2
 1b8:	be 01       	movw	r22, r28
 1ba:	6f 5f       	subi	r22, 0xFF	; 255
 1bc:	7f 4f       	sbci	r23, 0xFF	; 255
 1be:	86 e3       	ldi	r24, 0x36	; 54
 1c0:	0e 94 11 01 	call	0x222	; 0x222 <i2c_controller_receive>
			i2c_controller_transmit(DEBUG_ADDR, buffer, 2, I2C_NO_REPEAT);
 1c4:	20 e0       	ldi	r18, 0x00	; 0
 1c6:	42 e0       	ldi	r20, 0x02	; 2
 1c8:	be 01       	movw	r22, r28
 1ca:	6f 5f       	subi	r22, 0xFF	; 255
 1cc:	7f 4f       	sbci	r23, 0xFF	; 255
 1ce:	89 e6       	ldi	r24, 0x69	; 105
 1d0:	0e 94 55 01 	call	0x2aa	; 0x2aa <i2c_controller_transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d4:	2f ef       	ldi	r18, 0xFF	; 255
 1d6:	89 e6       	ldi	r24, 0x69	; 105
 1d8:	98 e1       	ldi	r25, 0x18	; 24
 1da:	21 50       	subi	r18, 0x01	; 1
 1dc:	80 40       	sbci	r24, 0x00	; 0
 1de:	90 40       	sbci	r25, 0x00	; 0
 1e0:	e1 f7       	brne	.-8      	; 0x1da <main+0x116>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <main+0x120>
 1e4:	00 00       	nop
		i2c_controller_transmit(MAX17263_ADDR, buffer, 1, I2C_REPEAT);
		i2c_controller_receive(MAX17263_ADDR, buffer, 2);
		i2c_controller_transmit(DEBUG_ADDR, buffer, 2, I2C_NO_REPEAT);
		
		
		for (uint8_t i = 0; i < 4; i++) {
 1e6:	1f 5f       	subi	r17, 0xFF	; 255
 1e8:	14 30       	cpi	r17, 0x04	; 4
 1ea:	50 f2       	brcs	.-108    	; 0x180 <main+0xbc>
			i2c_controller_transmit(DEBUG_ADDR, buffer, 2, I2C_NO_REPEAT);
			
			_delay_ms(1000);
		}
		
		fill_buffer(buffer, 4, 0xAABBCCDD);
 1ec:	2d ed       	ldi	r18, 0xDD	; 221
 1ee:	3c ec       	ldi	r19, 0xCC	; 204
 1f0:	4b eb       	ldi	r20, 0xBB	; 187
 1f2:	5a ea       	ldi	r21, 0xAA	; 170
 1f4:	64 e0       	ldi	r22, 0x04	; 4
 1f6:	ce 01       	movw	r24, r28
 1f8:	01 96       	adiw	r24, 0x01	; 1
 1fa:	0e 94 8c 01 	call	0x318	; 0x318 <fill_buffer>
		i2c_controller_transmit(DEBUG_ADDR, buffer, 4, I2C_NO_REPEAT);
 1fe:	20 e0       	ldi	r18, 0x00	; 0
 200:	44 e0       	ldi	r20, 0x04	; 4
 202:	be 01       	movw	r22, r28
 204:	6f 5f       	subi	r22, 0xFF	; 255
 206:	7f 4f       	sbci	r23, 0xFF	; 255
 208:	89 e6       	ldi	r24, 0x69	; 105
 20a:	0e 94 55 01 	call	0x2aa	; 0x2aa <i2c_controller_transmit>
 20e:	2f ef       	ldi	r18, 0xFF	; 255
 210:	80 e7       	ldi	r24, 0x70	; 112
 212:	92 e0       	ldi	r25, 0x02	; 2
 214:	21 50       	subi	r18, 0x01	; 1
 216:	80 40       	sbci	r24, 0x00	; 0
 218:	90 40       	sbci	r25, 0x00	; 0
 21a:	e1 f7       	brne	.-8      	; 0x214 <main+0x150>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <main+0x15a>
 21e:	00 00       	nop
 220:	70 cf       	rjmp	.-288    	; 0x102 <main+0x3e>

Disassembly of section .text.i2c_init:

000004ac <i2c_init>:

/*
	fscl = fcpu / (16 + 2(TWBR) * 4^TWPS)
*/
void i2c_init(uint32_t fcpu, uint32_t fscl) {
	TWSR = 0x00;
 4ac:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	TWBR = (((fcpu/fscl) - 16) / 2);
 4b0:	0e 94 c2 01 	call	0x384	; 0x384 <__udivmodsi4>
 4b4:	da 01       	movw	r26, r20
 4b6:	c9 01       	movw	r24, r18
 4b8:	40 97       	sbiw	r24, 0x10	; 16
 4ba:	a1 09       	sbc	r26, r1
 4bc:	b1 09       	sbc	r27, r1
 4be:	b6 95       	lsr	r27
 4c0:	a7 95       	ror	r26
 4c2:	97 95       	ror	r25
 4c4:	87 95       	ror	r24
 4c6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 4ca:	08 95       	ret

Disassembly of section .text.i2c_start:

00000406 <i2c_start>:


uint8_t i2c_start(void) {
	
	// send START condition, wait for complete
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
 406:	84 ea       	ldi	r24, 0xA4	; 164
 408:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT)));
 40c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 410:	88 23       	and	r24, r24
 412:	e4 f7       	brge	.-8      	; 0x40c <i2c_start+0x6>
  
	// check status reg
	if ((TW_STATUS != TW_START) && (TW_STATUS != TW_REP_START)) {
 414:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 418:	88 7f       	andi	r24, 0xF8	; 248
 41a:	88 30       	cpi	r24, 0x08	; 8
 41c:	49 f0       	breq	.+18     	; 0x430 <i2c_start+0x2a>
 41e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 422:	88 7f       	andi	r24, 0xF8	; 248
 424:	80 31       	cpi	r24, 0x10	; 16
 426:	31 f0       	breq	.+12     	; 0x434 <i2c_start+0x2e>
		return TW_STATUS;
 428:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 42c:	88 7f       	andi	r24, 0xF8	; 248
 42e:	08 95       	ret
	}
	else {
		return 0;
 430:	80 e0       	ldi	r24, 0x00	; 0
 432:	08 95       	ret
 434:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 436:	08 95       	ret

Disassembly of section .text.i2c_address:

000003c8 <i2c_address>:


uint8_t i2c_address(uint8_t addr, uint8_t rw) {
	
	// load address + r/w, start transmission
	TWDR = (addr << 1) | rw;
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	88 0f       	add	r24, r24
 3cc:	99 1f       	adc	r25, r25
 3ce:	86 2b       	or	r24, r22
 3d0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1 << TWINT) | (1 << TWEN);
 3d4:	84 e8       	ldi	r24, 0x84	; 132
 3d6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT)));
 3da:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 3de:	88 23       	and	r24, r24
 3e0:	e4 f7       	brge	.-8      	; 0x3da <i2c_address+0x12>
	
	// check status reg for ACK
	if ((TW_STATUS != TW_MT_SLA_ACK) && (TW_STATUS != TW_MR_SLA_ACK)) {
 3e2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 3e6:	88 7f       	andi	r24, 0xF8	; 248
 3e8:	88 31       	cpi	r24, 0x18	; 24
 3ea:	49 f0       	breq	.+18     	; 0x3fe <i2c_address+0x36>
 3ec:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 3f0:	88 7f       	andi	r24, 0xF8	; 248
 3f2:	80 34       	cpi	r24, 0x40	; 64
 3f4:	31 f0       	breq	.+12     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
		return TW_STATUS;
 3f6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 3fa:	88 7f       	andi	r24, 0xF8	; 248
 3fc:	08 95       	ret
	}
	else {
		return 0;
 3fe:	80 e0       	ldi	r24, 0x00	; 0
 400:	08 95       	ret
 402:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 404:	08 95       	ret

Disassembly of section .text.i2c_write:

00000438 <i2c_write>:


uint8_t i2c_write (uint8_t data) {
	
	// load data, start transmission
	TWDR = data;
 438:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1 << TWINT)|(1 << TWEN);
 43c:	84 e8       	ldi	r24, 0x84	; 132
 43e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT)));
 442:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 446:	88 23       	and	r24, r24
 448:	e4 f7       	brge	.-8      	; 0x442 <i2c_write+0xa>
		
	// check status reg for ACK
	if (TW_STATUS != TW_MT_DATA_ACK) {
 44a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 44e:	88 7f       	andi	r24, 0xF8	; 248
 450:	88 32       	cpi	r24, 0x28	; 40
 452:	21 f0       	breq	.+8      	; 0x45c <i2c_write+0x24>
		return TW_STATUS;
 454:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 458:	88 7f       	andi	r24, 0xF8	; 248
 45a:	08 95       	ret
	}
	else {
		return 0; 
 45c:	80 e0       	ldi	r24, 0x00	; 0
	}	
}
 45e:	08 95       	ret

Disassembly of section .text.i2c_readACK:

00000460 <i2c_readACK>:


uint8_t i2c_readACK(void) {
		
	// read with ACK
	TWCR = (1 << TWEN) | (1 << TWINT) | (1 << TWEA);
 460:	84 ec       	ldi	r24, 0xC4	; 196
 462:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT)));
 466:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 46a:	88 23       	and	r24, r24
 46c:	e4 f7       	brge	.-8      	; 0x466 <i2c_readACK+0x6>
		
	// check if ACK sent
	if (TW_STATUS!= TW_MR_DATA_ACK) {
 46e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 472:	88 7f       	andi	r24, 0xF8	; 248
 474:	80 35       	cpi	r24, 0x50	; 80
 476:	21 f0       	breq	.+8      	; 0x480 <i2c_readACK+0x20>
		return TW_STATUS;
 478:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 47c:	88 7f       	andi	r24, 0xF8	; 248
 47e:	08 95       	ret
	}
		
	// return data on success
	else {
		return TWDR;
 480:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	}
}
 484:	08 95       	ret

Disassembly of section .text.i2c_readNACK:

00000486 <i2c_readNACK>:


uint8_t i2c_readNACK (void) {
		
	// enable send NACK to slave
	TWCR = (1 << TWEN) | (1 << TWINT);
 486:	84 e8       	ldi	r24, 0x84	; 132
 488:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (! (TWCR & (1 << TWINT)));
 48c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 490:	88 23       	and	r24, r24
 492:	e4 f7       	brge	.-8      	; 0x48c <i2c_readNACK+0x6>
		
	// check if NACK sent
	if (TW_STATUS != TW_MR_DATA_NACK) {
 494:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 498:	88 7f       	andi	r24, 0xF8	; 248
 49a:	88 35       	cpi	r24, 0x58	; 88
 49c:	21 f0       	breq	.+8      	; 0x4a6 <i2c_readNACK+0x20>
		return TW_STATUS;
 49e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 4a2:	88 7f       	andi	r24, 0xF8	; 248
 4a4:	08 95       	ret
	}
		
	// return data on success
	else {
		return TWDR;
 4a6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	}
}
 4aa:	08 95       	ret

Disassembly of section .text.i2c_stop:

000004e2 <i2c_stop>:


void i2c_stop (void) {
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
 4e2:	84 e9       	ldi	r24, 0x94	; 148
 4e4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 4e8:	08 95       	ret

Disassembly of section .text.i2c_controller_transmit:

000002aa <i2c_controller_transmit>:
}


uint8_t i2c_controller_transmit(uint8_t addr, uint8_t* data, uint8_t len, uint8_t repeat) {
 2aa:	ff 92       	push	r15
 2ac:	0f 93       	push	r16
 2ae:	1f 93       	push	r17
 2b0:	cf 93       	push	r28
 2b2:	df 93       	push	r29
 2b4:	c8 2f       	mov	r28, r24
 2b6:	8b 01       	movw	r16, r22
 2b8:	d4 2f       	mov	r29, r20
 2ba:	f2 2e       	mov	r15, r18
	
	uint8_t err;
	
	err = i2c_start();
 2bc:	0e 94 03 02 	call	0x406	; 0x406 <i2c_start>
	if (err != 0) {
 2c0:	81 11       	cpse	r24, r1
 2c2:	24 c0       	rjmp	.+72     	; 0x30c <i2c_controller_transmit+0x62>
		return err;
	}
	
	err = i2c_address(addr, TW_WRITE);
 2c4:	60 e0       	ldi	r22, 0x00	; 0
 2c6:	8c 2f       	mov	r24, r28
 2c8:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <i2c_address>
	if (err != 0) {
 2cc:	81 11       	cpse	r24, r1
 2ce:	1e c0       	rjmp	.+60     	; 0x30c <i2c_controller_transmit+0x62>
		return err;
	}
	
	if (len > 1) {
 2d0:	d2 30       	cpi	r29, 0x02	; 2
 2d2:	58 f4       	brcc	.+22     	; 0x2ea <i2c_controller_transmit+0x40>
 2d4:	0e c0       	rjmp	.+28     	; 0x2f2 <i2c_controller_transmit+0x48>
		for (uint8_t i = 0; i < len; i++) {
			err = i2c_write(data[i]);
 2d6:	f8 01       	movw	r30, r16
 2d8:	ec 0f       	add	r30, r28
 2da:	f1 1d       	adc	r31, r1
 2dc:	80 81       	ld	r24, Z
 2de:	0e 94 1c 02 	call	0x438	; 0x438 <i2c_write>
			if (err != 0) {
 2e2:	81 11       	cpse	r24, r1
 2e4:	13 c0       	rjmp	.+38     	; 0x30c <i2c_controller_transmit+0x62>
	if (err != 0) {
		return err;
	}
	
	if (len > 1) {
		for (uint8_t i = 0; i < len; i++) {
 2e6:	cf 5f       	subi	r28, 0xFF	; 255
 2e8:	01 c0       	rjmp	.+2      	; 0x2ec <i2c_controller_transmit+0x42>
 2ea:	c0 e0       	ldi	r28, 0x00	; 0
 2ec:	cd 17       	cp	r28, r29
 2ee:	98 f3       	brcs	.-26     	; 0x2d6 <i2c_controller_transmit+0x2c>
 2f0:	06 c0       	rjmp	.+12     	; 0x2fe <i2c_controller_transmit+0x54>
			}
		}
	}
	
	else {
		err = i2c_write(data[0]);
 2f2:	f8 01       	movw	r30, r16
 2f4:	80 81       	ld	r24, Z
 2f6:	0e 94 1c 02 	call	0x438	; 0x438 <i2c_write>
		if (err != 0) {
 2fa:	81 11       	cpse	r24, r1
 2fc:	07 c0       	rjmp	.+14     	; 0x30c <i2c_controller_transmit+0x62>
			return err;
		}
	}
	
	if (!repeat) {
 2fe:	f1 10       	cpse	r15, r1
 300:	04 c0       	rjmp	.+8      	; 0x30a <i2c_controller_transmit+0x60>
		i2c_stop();
 302:	0e 94 71 02 	call	0x4e2	; 0x4e2 <i2c_stop>
		return 0;
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	01 c0       	rjmp	.+2      	; 0x30c <i2c_controller_transmit+0x62>
	}
	
	return 0;
 30a:	80 e0       	ldi	r24, 0x00	; 0
}
 30c:	df 91       	pop	r29
 30e:	cf 91       	pop	r28
 310:	1f 91       	pop	r17
 312:	0f 91       	pop	r16
 314:	ff 90       	pop	r15
 316:	08 95       	ret

Disassembly of section .text.i2c_controller_receive:

00000222 <i2c_controller_receive>:


uint32_t i2c_controller_receive(uint8_t addr, uint8_t* data, uint8_t len) {
 222:	ef 92       	push	r14
 224:	ff 92       	push	r15
 226:	0f 93       	push	r16
 228:	1f 93       	push	r17
 22a:	cf 93       	push	r28
 22c:	df 93       	push	r29
 22e:	c8 2f       	mov	r28, r24
 230:	8b 01       	movw	r16, r22
 232:	d4 2f       	mov	r29, r20
	
	uint8_t err;

	
	err = i2c_start();
 234:	0e 94 03 02 	call	0x406	; 0x406 <i2c_start>
	if (err != 0) {
 238:	88 23       	and	r24, r24
 23a:	29 f0       	breq	.+10     	; 0x246 <i2c_controller_receive+0x24>
		return err;
 23c:	68 2f       	mov	r22, r24
 23e:	70 e0       	ldi	r23, 0x00	; 0
 240:	80 e0       	ldi	r24, 0x00	; 0
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	2b c0       	rjmp	.+86     	; 0x29c <i2c_controller_receive+0x7a>
	}
	
	err = i2c_address(addr, TW_READ);
 246:	61 e0       	ldi	r22, 0x01	; 1
 248:	8c 2f       	mov	r24, r28
 24a:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <i2c_address>
	if (err != 0) {
 24e:	88 23       	and	r24, r24
 250:	71 f0       	breq	.+28     	; 0x26e <i2c_controller_receive+0x4c>
		return err;
 252:	68 2f       	mov	r22, r24
 254:	70 e0       	ldi	r23, 0x00	; 0
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	20 c0       	rjmp	.+64     	; 0x29c <i2c_controller_receive+0x7a>
	}
	
	for (uint8_t i = 0; i < len - 1; i++) {
		data[i] = i2c_readACK();
 25c:	78 01       	movw	r14, r16
 25e:	ec 0e       	add	r14, r28
 260:	f1 1c       	adc	r15, r1
 262:	0e 94 30 02 	call	0x460	; 0x460 <i2c_readACK>
 266:	f7 01       	movw	r30, r14
 268:	80 83       	st	Z, r24
	err = i2c_address(addr, TW_READ);
	if (err != 0) {
		return err;
	}
	
	for (uint8_t i = 0; i < len - 1; i++) {
 26a:	cf 5f       	subi	r28, 0xFF	; 255
 26c:	01 c0       	rjmp	.+2      	; 0x270 <i2c_controller_receive+0x4e>
 26e:	c0 e0       	ldi	r28, 0x00	; 0
 270:	2c 2f       	mov	r18, r28
 272:	30 e0       	ldi	r19, 0x00	; 0
 274:	8d 2f       	mov	r24, r29
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	01 97       	sbiw	r24, 0x01	; 1
 27a:	28 17       	cp	r18, r24
 27c:	39 07       	cpc	r19, r25
 27e:	74 f3       	brlt	.-36     	; 0x25c <i2c_controller_receive+0x3a>
		data[i] = i2c_readACK();
	
	}
	
	data[len-1] = i2c_readNACK();
 280:	8d 2f       	mov	r24, r29
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	01 97       	sbiw	r24, 0x01	; 1
 286:	e8 01       	movw	r28, r16
 288:	c8 0f       	add	r28, r24
 28a:	d9 1f       	adc	r29, r25
 28c:	0e 94 43 02 	call	0x486	; 0x486 <i2c_readNACK>
 290:	88 83       	st	Y, r24
	
	i2c_stop();
 292:	0e 94 71 02 	call	0x4e2	; 0x4e2 <i2c_stop>
	
	return 0;
 296:	60 e0       	ldi	r22, 0x00	; 0
 298:	70 e0       	ldi	r23, 0x00	; 0
 29a:	cb 01       	movw	r24, r22
 29c:	df 91       	pop	r29
 29e:	cf 91       	pop	r28
 2a0:	1f 91       	pop	r17
 2a2:	0f 91       	pop	r16
 2a4:	ff 90       	pop	r15
 2a6:	ef 90       	pop	r14
 2a8:	08 95       	ret

Disassembly of section .text.libgcc.div:

00000384 <__udivmodsi4>:
 384:	a1 e2       	ldi	r26, 0x21	; 33
 386:	1a 2e       	mov	r1, r26
 388:	aa 1b       	sub	r26, r26
 38a:	bb 1b       	sub	r27, r27
 38c:	fd 01       	movw	r30, r26
 38e:	0d c0       	rjmp	.+26     	; 0x3aa <__udivmodsi4_ep>

00000390 <__udivmodsi4_loop>:
 390:	aa 1f       	adc	r26, r26
 392:	bb 1f       	adc	r27, r27
 394:	ee 1f       	adc	r30, r30
 396:	ff 1f       	adc	r31, r31
 398:	a2 17       	cp	r26, r18
 39a:	b3 07       	cpc	r27, r19
 39c:	e4 07       	cpc	r30, r20
 39e:	f5 07       	cpc	r31, r21
 3a0:	20 f0       	brcs	.+8      	; 0x3aa <__udivmodsi4_ep>
 3a2:	a2 1b       	sub	r26, r18
 3a4:	b3 0b       	sbc	r27, r19
 3a6:	e4 0b       	sbc	r30, r20
 3a8:	f5 0b       	sbc	r31, r21

000003aa <__udivmodsi4_ep>:
 3aa:	66 1f       	adc	r22, r22
 3ac:	77 1f       	adc	r23, r23
 3ae:	88 1f       	adc	r24, r24
 3b0:	99 1f       	adc	r25, r25
 3b2:	1a 94       	dec	r1
 3b4:	69 f7       	brne	.-38     	; 0x390 <__udivmodsi4_loop>
 3b6:	60 95       	com	r22
 3b8:	70 95       	com	r23
 3ba:	80 95       	com	r24
 3bc:	90 95       	com	r25
 3be:	9b 01       	movw	r18, r22
 3c0:	ac 01       	movw	r20, r24
 3c2:	bd 01       	movw	r22, r26
 3c4:	cf 01       	movw	r24, r30
 3c6:	08 95       	ret

Disassembly of section .text.__dummy_fini:

000004f2 <_fini>:
 4f2:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000004f4 <__funcs_on_exit>:
 4f4:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000004f6 <__simulator_exit>:
 4f6:	08 95       	ret

Disassembly of section .text.exit:

000004cc <exit>:
 4cc:	ec 01       	movw	r28, r24
 4ce:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <__funcs_on_exit>
 4d2:	0e 94 79 02 	call	0x4f2	; 0x4f2 <_fini>
 4d6:	ce 01       	movw	r24, r28
 4d8:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <__simulator_exit>
 4dc:	ce 01       	movw	r24, r28
 4de:	0e 94 77 02 	call	0x4ee	; 0x4ee <_Exit>

Disassembly of section .text._Exit:

000004ee <_Exit>:
 4ee:	0e 94 60 00 	call	0xc0	; 0xc0 <_exit>
